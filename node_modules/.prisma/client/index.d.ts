
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model roles
 * 
 */
export type roles = {
  id: number
  role: string
}

/**
 * Model users
 * 
 */
export type users = {
  id: number
  username: string
  password: string
  name: string
  phone: string
  born_date: string | null
  user_picture: string | null
  role_id: number
  magazine_id: number | null
  date_created: string
}

/**
 * Model balance
 * 
 */
export type balance = {
  id: number
  balance: string
  left_balance: string
  date_created_updated: string
}

/**
 * Model balance_history
 * 
 */
export type balance_history = {
  id: number
  add_balance: string | null
  get_balance: string | null
  note: string
  report: boolean
  date_created: string
}

/**
 * Model costs
 * 
 */
export type costs = {
  id: number
  name: string
  number: string
  amount: string
  price: string
  note: string
  is_serio: boolean | null
  date_created: string
}

/**
 * Model dress
 * 
 */
export type dress = {
  id: number
  name: string
  price: string
  img: string
  date_created: string
  user_id: number
}

/**
 * Model salonlist
 * 
 */
export type salonlist = {
  id: number
  salonchi_name: string
  salon_name: string
  address: string
  phone: string
  date_created: string
  user_id: number
}

/**
 * Model sale
 * 
 */
export type sale = {
  id: number
  isfifty: boolean | null
  dress_id: number
  dress_count: string | null
  main_price: string | null
  dress_note: string
  given_price: string | null
  left_price: string | null
  date_left_price: string | null
  sold_by_phone: boolean | null
  salon_id: number
  delivery_date: string | null
  need_send: boolean | null
  delivered: boolean | null
  canceled: boolean | null
  girl_name: string | null
  wedding_date: string | null
  ispassport: boolean | null
  salon_given_price: string | null
  date_created: string
  user_id: number
}

/**
 * Model magazins
 * 
 */
export type magazins = {
  id: number
  name: string
  img: string | null
  money: string | null
  saled_dresses: string | null
  left_money: string | null
  address: string | null
  date_created: string
}

/**
 * Model product
 * 
 */
export type product = {
  id: number
  name: string
  count: string | null
  amount: string
  img: string | null
  date_created: number
}

/**
 * Model warehouse
 * 
 */
export type warehouse = {
  id: number
  product_id: number
  count: number
  price: number | null
  note: string
  isused: boolean | null
  date_created: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Roles
 * const roles = await prisma.roles.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Roles
   * const roles = await prisma.roles.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.roles`: Exposes CRUD operations for the **roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.rolesDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.balance`: Exposes CRUD operations for the **balance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Balances
    * const balances = await prisma.balance.findMany()
    * ```
    */
  get balance(): Prisma.balanceDelegate<GlobalReject>;

  /**
   * `prisma.balance_history`: Exposes CRUD operations for the **balance_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Balance_histories
    * const balance_histories = await prisma.balance_history.findMany()
    * ```
    */
  get balance_history(): Prisma.balance_historyDelegate<GlobalReject>;

  /**
   * `prisma.costs`: Exposes CRUD operations for the **costs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Costs
    * const costs = await prisma.costs.findMany()
    * ```
    */
  get costs(): Prisma.costsDelegate<GlobalReject>;

  /**
   * `prisma.dress`: Exposes CRUD operations for the **dress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dresses
    * const dresses = await prisma.dress.findMany()
    * ```
    */
  get dress(): Prisma.dressDelegate<GlobalReject>;

  /**
   * `prisma.salonlist`: Exposes CRUD operations for the **salonlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Salonlists
    * const salonlists = await prisma.salonlist.findMany()
    * ```
    */
  get salonlist(): Prisma.salonlistDelegate<GlobalReject>;

  /**
   * `prisma.sale`: Exposes CRUD operations for the **sale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sales
    * const sales = await prisma.sale.findMany()
    * ```
    */
  get sale(): Prisma.saleDelegate<GlobalReject>;

  /**
   * `prisma.magazins`: Exposes CRUD operations for the **magazins** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Magazins
    * const magazins = await prisma.magazins.findMany()
    * ```
    */
  get magazins(): Prisma.magazinsDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<GlobalReject>;

  /**
   * `prisma.warehouse`: Exposes CRUD operations for the **warehouse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Warehouses
    * const warehouses = await prisma.warehouse.findMany()
    * ```
    */
  get warehouse(): Prisma.warehouseDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.6.0
   * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    roles: 'roles',
    users: 'users',
    balance: 'balance',
    balance_history: 'balance_history',
    costs: 'costs',
    dress: 'dress',
    salonlist: 'salonlist',
    sale: 'sale',
    magazins: 'magazins',
    product: 'product',
    warehouse: 'warehouse'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RolesCountOutputType
   */


  export type RolesCountOutputType = {
    users: number
  }

  export type RolesCountOutputTypeSelect = {
    users?: boolean
  }

  export type RolesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RolesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RolesCountOutputType
    : S extends undefined
    ? never
    : S extends RolesCountOutputTypeArgs
    ?'include' extends U
    ? RolesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof RolesCountOutputType ?RolesCountOutputType [P]
  : 
     never
  } 
    : RolesCountOutputType
  : RolesCountOutputType




  // Custom InputTypes

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     * 
    **/
    select?: RolesCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    dress: number
    sale: number
  }

  export type UsersCountOutputTypeSelect = {
    dress?: boolean
    sale?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UsersCountOutputType ?UsersCountOutputType [P]
  : 
     never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type DressCountOutputType
   */


  export type DressCountOutputType = {
    sale: number
  }

  export type DressCountOutputTypeSelect = {
    sale?: boolean
  }

  export type DressCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DressCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DressCountOutputType
    : S extends undefined
    ? never
    : S extends DressCountOutputTypeArgs
    ?'include' extends U
    ? DressCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof DressCountOutputType ?DressCountOutputType [P]
  : 
     never
  } 
    : DressCountOutputType
  : DressCountOutputType




  // Custom InputTypes

  /**
   * DressCountOutputType without action
   */
  export type DressCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DressCountOutputType
     * 
    **/
    select?: DressCountOutputTypeSelect | null
  }



  /**
   * Count Type SalonlistCountOutputType
   */


  export type SalonlistCountOutputType = {
    sale: number
  }

  export type SalonlistCountOutputTypeSelect = {
    sale?: boolean
  }

  export type SalonlistCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SalonlistCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SalonlistCountOutputType
    : S extends undefined
    ? never
    : S extends SalonlistCountOutputTypeArgs
    ?'include' extends U
    ? SalonlistCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof SalonlistCountOutputType ?SalonlistCountOutputType [P]
  : 
     never
  } 
    : SalonlistCountOutputType
  : SalonlistCountOutputType




  // Custom InputTypes

  /**
   * SalonlistCountOutputType without action
   */
  export type SalonlistCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SalonlistCountOutputType
     * 
    **/
    select?: SalonlistCountOutputTypeSelect | null
  }



  /**
   * Count Type MagazinsCountOutputType
   */


  export type MagazinsCountOutputType = {
    users: number
  }

  export type MagazinsCountOutputTypeSelect = {
    users?: boolean
  }

  export type MagazinsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | MagazinsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? MagazinsCountOutputType
    : S extends undefined
    ? never
    : S extends MagazinsCountOutputTypeArgs
    ?'include' extends U
    ? MagazinsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof MagazinsCountOutputType ?MagazinsCountOutputType [P]
  : 
     never
  } 
    : MagazinsCountOutputType
  : MagazinsCountOutputType




  // Custom InputTypes

  /**
   * MagazinsCountOutputType without action
   */
  export type MagazinsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MagazinsCountOutputType
     * 
    **/
    select?: MagazinsCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    warehouse: number
  }

  export type ProductCountOutputTypeSelect = {
    warehouse?: boolean
  }

  export type ProductCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProductCountOutputType
    : S extends undefined
    ? never
    : S extends ProductCountOutputTypeArgs
    ?'include' extends U
    ? ProductCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ProductCountOutputType ?ProductCountOutputType [P]
  : 
     never
  } 
    : ProductCountOutputType
  : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     * 
    **/
    select?: ProductCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model roles
   */


  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesAvgAggregateOutputType = {
    id: number | null
  }

  export type RolesSumAggregateOutputType = {
    id: number | null
  }

  export type RolesMinAggregateOutputType = {
    id: number | null
    role: string | null
  }

  export type RolesMaxAggregateOutputType = {
    id: number | null
    role: string | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    role: number
    _all: number
  }


  export type RolesAvgAggregateInputType = {
    id?: true
  }

  export type RolesSumAggregateInputType = {
    id?: true
  }

  export type RolesMinAggregateInputType = {
    id?: true
    role?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    role?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    role?: true
    _all?: true
  }

  export type RolesAggregateArgs = {
    /**
     * Filter which roles to aggregate.
     * 
    **/
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     * 
    **/
    orderBy?: Enumerable<rolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type RolesGroupByArgs = {
    where?: rolesWhereInput
    orderBy?: Enumerable<rolesOrderByWithAggregationInput>
    by: Array<RolesScalarFieldEnum>
    having?: rolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _avg?: RolesAvgAggregateInputType
    _sum?: RolesSumAggregateInputType
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }


  export type RolesGroupByOutputType = {
    id: number
    role: string
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends RolesGroupByArgs> = Promise<
    Array<
      PickArray<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type rolesSelect = {
    id?: boolean
    role?: boolean
    users?: boolean | usersFindManyArgs
    _count?: boolean | RolesCountOutputTypeArgs
  }

  export type rolesInclude = {
    users?: boolean | usersFindManyArgs
    _count?: boolean | RolesCountOutputTypeArgs
  }

  export type rolesGetPayload<
    S extends boolean | null | undefined | rolesArgs,
    U = keyof S
      > = S extends true
        ? roles
    : S extends undefined
    ? never
    : S extends rolesArgs | rolesFindManyArgs
    ?'include' extends U
    ? roles  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? RolesCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof roles ?roles [P]
  : 
          P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? RolesCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : roles
  : roles


  type rolesCountArgs = Merge<
    Omit<rolesFindManyArgs, 'select' | 'include'> & {
      select?: RolesCountAggregateInputType | true
    }
  >

  export interface rolesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Roles that matches the filter.
     * @param {rolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends rolesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, rolesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'roles'> extends True ? CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>> : CheckSelect<T, Prisma__rolesClient<roles | null >, Prisma__rolesClient<rolesGetPayload<T> | null >>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends rolesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, rolesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'roles'> extends True ? CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>> : CheckSelect<T, Prisma__rolesClient<roles | null >, Prisma__rolesClient<rolesGetPayload<T> | null >>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends rolesFindManyArgs>(
      args?: SelectSubset<T, rolesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<roles>>, PrismaPromise<Array<rolesGetPayload<T>>>>

    /**
     * Create a Roles.
     * @param {rolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
    **/
    create<T extends rolesCreateArgs>(
      args: SelectSubset<T, rolesCreateArgs>
    ): CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>>

    /**
     * Create many Roles.
     *     @param {rolesCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const roles = await prisma.roles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends rolesCreateManyArgs>(
      args?: SelectSubset<T, rolesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Roles.
     * @param {rolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
    **/
    delete<T extends rolesDeleteArgs>(
      args: SelectSubset<T, rolesDeleteArgs>
    ): CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>>

    /**
     * Update one Roles.
     * @param {rolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rolesUpdateArgs>(
      args: SelectSubset<T, rolesUpdateArgs>
    ): CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>>

    /**
     * Delete zero or more Roles.
     * @param {rolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rolesDeleteManyArgs>(
      args?: SelectSubset<T, rolesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rolesUpdateManyArgs>(
      args: SelectSubset<T, rolesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles.
     * @param {rolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
    **/
    upsert<T extends rolesUpsertArgs>(
      args: SelectSubset<T, rolesUpsertArgs>
    ): CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends rolesCountArgs>(
      args?: Subset<T, rolesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolesGroupByArgs['orderBy'] }
        : { orderBy?: RolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rolesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersFindManyArgs = {}>(args?: Subset<T, usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * roles findUnique
   */
  export type rolesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * Throw an Error if a roles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which roles to fetch.
     * 
    **/
    where: rolesWhereUniqueInput
  }


  /**
   * roles findFirst
   */
  export type rolesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * Throw an Error if a roles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which roles to fetch.
     * 
    **/
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     * 
    **/
    orderBy?: Enumerable<rolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     * 
    **/
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     * 
    **/
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * roles findMany
   */
  export type rolesFindManyArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * Filter, which roles to fetch.
     * 
    **/
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     * 
    **/
    orderBy?: Enumerable<rolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     * 
    **/
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * roles create
   */
  export type rolesCreateArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * The data needed to create a roles.
     * 
    **/
    data: XOR<rolesCreateInput, rolesUncheckedCreateInput>
  }


  /**
   * roles createMany
   */
  export type rolesCreateManyArgs = {
    data: Enumerable<rolesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * roles update
   */
  export type rolesUpdateArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * The data needed to update a roles.
     * 
    **/
    data: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
    /**
     * Choose, which roles to update.
     * 
    **/
    where: rolesWhereUniqueInput
  }


  /**
   * roles updateMany
   */
  export type rolesUpdateManyArgs = {
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyInput>
    where?: rolesWhereInput
  }


  /**
   * roles upsert
   */
  export type rolesUpsertArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * The filter to search for the roles to update in case it exists.
     * 
    **/
    where: rolesWhereUniqueInput
    /**
     * In case the roles found by the `where` argument doesn't exist, create a new roles with this data.
     * 
    **/
    create: XOR<rolesCreateInput, rolesUncheckedCreateInput>
    /**
     * In case the roles was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
  }


  /**
   * roles delete
   */
  export type rolesDeleteArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * Filter which roles to delete.
     * 
    **/
    where: rolesWhereUniqueInput
  }


  /**
   * roles deleteMany
   */
  export type rolesDeleteManyArgs = {
    where?: rolesWhereInput
  }


  /**
   * roles without action
   */
  export type rolesArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    role_id: number | null
    magazine_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    role_id: number | null
    magazine_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    name: string | null
    phone: string | null
    born_date: string | null
    user_picture: string | null
    role_id: number | null
    magazine_id: number | null
    date_created: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    name: string | null
    phone: string | null
    born_date: string | null
    user_picture: string | null
    role_id: number | null
    magazine_id: number | null
    date_created: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    password: number
    name: number
    phone: number
    born_date: number
    user_picture: number
    role_id: number
    magazine_id: number
    date_created: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    role_id?: true
    magazine_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    role_id?: true
    magazine_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    phone?: true
    born_date?: true
    user_picture?: true
    role_id?: true
    magazine_id?: true
    date_created?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    phone?: true
    born_date?: true
    user_picture?: true
    role_id?: true
    magazine_id?: true
    date_created?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    phone?: true
    born_date?: true
    user_picture?: true
    role_id?: true
    magazine_id?: true
    date_created?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    username: string
    password: string
    name: string
    phone: string
    born_date: string | null
    user_picture: string | null
    role_id: number
    magazine_id: number | null
    date_created: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Promise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    phone?: boolean
    born_date?: boolean
    user_picture?: boolean
    role_id?: boolean
    magazine_id?: boolean
    date_created?: boolean
    magazins?: boolean | magazinsArgs
    roles?: boolean | rolesArgs
    dress?: boolean | dressFindManyArgs
    sale?: boolean | saleFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    magazins?: boolean | magazinsArgs
    roles?: boolean | rolesArgs
    dress?: boolean | dressFindManyArgs
    sale?: boolean | saleFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'magazins'
        ? magazinsGetPayload<S['include'][P]> | null :
        P extends 'roles'
        ? rolesGetPayload<S['include'][P]> :
        P extends 'dress'
        ? Array < dressGetPayload<S['include'][P]>>  :
        P extends 'sale'
        ? Array < saleGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UsersCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'magazins'
        ? magazinsGetPayload<S['select'][P]> | null :
        P extends 'roles'
        ? rolesGetPayload<S['select'][P]> :
        P extends 'dress'
        ? Array < dressGetPayload<S['select'][P]>>  :
        P extends 'sale'
        ? Array < saleGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UsersCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    magazins<T extends magazinsArgs = {}>(args?: Subset<T, magazinsArgs>): CheckSelect<T, Prisma__magazinsClient<magazins | null >, Prisma__magazinsClient<magazinsGetPayload<T> | null >>;

    roles<T extends rolesArgs = {}>(args?: Subset<T, rolesArgs>): CheckSelect<T, Prisma__rolesClient<roles | null >, Prisma__rolesClient<rolesGetPayload<T> | null >>;

    dress<T extends dressFindManyArgs = {}>(args?: Subset<T, dressFindManyArgs>): CheckSelect<T, PrismaPromise<Array<dress>>, PrismaPromise<Array<dressGetPayload<T>>>>;

    sale<T extends saleFindManyArgs = {}>(args?: Subset<T, saleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sale>>, PrismaPromise<Array<saleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model balance
   */


  export type AggregateBalance = {
    _count: BalanceCountAggregateOutputType | null
    _avg: BalanceAvgAggregateOutputType | null
    _sum: BalanceSumAggregateOutputType | null
    _min: BalanceMinAggregateOutputType | null
    _max: BalanceMaxAggregateOutputType | null
  }

  export type BalanceAvgAggregateOutputType = {
    id: number | null
  }

  export type BalanceSumAggregateOutputType = {
    id: number | null
  }

  export type BalanceMinAggregateOutputType = {
    id: number | null
    balance: string | null
    left_balance: string | null
    date_created_updated: string | null
  }

  export type BalanceMaxAggregateOutputType = {
    id: number | null
    balance: string | null
    left_balance: string | null
    date_created_updated: string | null
  }

  export type BalanceCountAggregateOutputType = {
    id: number
    balance: number
    left_balance: number
    date_created_updated: number
    _all: number
  }


  export type BalanceAvgAggregateInputType = {
    id?: true
  }

  export type BalanceSumAggregateInputType = {
    id?: true
  }

  export type BalanceMinAggregateInputType = {
    id?: true
    balance?: true
    left_balance?: true
    date_created_updated?: true
  }

  export type BalanceMaxAggregateInputType = {
    id?: true
    balance?: true
    left_balance?: true
    date_created_updated?: true
  }

  export type BalanceCountAggregateInputType = {
    id?: true
    balance?: true
    left_balance?: true
    date_created_updated?: true
    _all?: true
  }

  export type BalanceAggregateArgs = {
    /**
     * Filter which balance to aggregate.
     * 
    **/
    where?: balanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balances to fetch.
     * 
    **/
    orderBy?: Enumerable<balanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: balanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balances.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned balances
    **/
    _count?: true | BalanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BalanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BalanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BalanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BalanceMaxAggregateInputType
  }

  export type GetBalanceAggregateType<T extends BalanceAggregateArgs> = {
        [P in keyof T & keyof AggregateBalance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBalance[P]>
      : GetScalarType<T[P], AggregateBalance[P]>
  }




  export type BalanceGroupByArgs = {
    where?: balanceWhereInput
    orderBy?: Enumerable<balanceOrderByWithAggregationInput>
    by: Array<BalanceScalarFieldEnum>
    having?: balanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BalanceCountAggregateInputType | true
    _avg?: BalanceAvgAggregateInputType
    _sum?: BalanceSumAggregateInputType
    _min?: BalanceMinAggregateInputType
    _max?: BalanceMaxAggregateInputType
  }


  export type BalanceGroupByOutputType = {
    id: number
    balance: string
    left_balance: string
    date_created_updated: string
    _count: BalanceCountAggregateOutputType | null
    _avg: BalanceAvgAggregateOutputType | null
    _sum: BalanceSumAggregateOutputType | null
    _min: BalanceMinAggregateOutputType | null
    _max: BalanceMaxAggregateOutputType | null
  }

  type GetBalanceGroupByPayload<T extends BalanceGroupByArgs> = Promise<
    Array<
      PickArray<BalanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BalanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BalanceGroupByOutputType[P]>
            : GetScalarType<T[P], BalanceGroupByOutputType[P]>
        }
      >
    >


  export type balanceSelect = {
    id?: boolean
    balance?: boolean
    left_balance?: boolean
    date_created_updated?: boolean
  }

  export type balanceGetPayload<
    S extends boolean | null | undefined | balanceArgs,
    U = keyof S
      > = S extends true
        ? balance
    : S extends undefined
    ? never
    : S extends balanceArgs | balanceFindManyArgs
    ?'include' extends U
    ? balance 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof balance ?balance [P]
  : 
     never
  } 
    : balance
  : balance


  type balanceCountArgs = Merge<
    Omit<balanceFindManyArgs, 'select' | 'include'> & {
      select?: BalanceCountAggregateInputType | true
    }
  >

  export interface balanceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Balance that matches the filter.
     * @param {balanceFindUniqueArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends balanceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, balanceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'balance'> extends True ? CheckSelect<T, Prisma__balanceClient<balance>, Prisma__balanceClient<balanceGetPayload<T>>> : CheckSelect<T, Prisma__balanceClient<balance | null >, Prisma__balanceClient<balanceGetPayload<T> | null >>

    /**
     * Find the first Balance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balanceFindFirstArgs} args - Arguments to find a Balance
     * @example
     * // Get one Balance
     * const balance = await prisma.balance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends balanceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, balanceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'balance'> extends True ? CheckSelect<T, Prisma__balanceClient<balance>, Prisma__balanceClient<balanceGetPayload<T>>> : CheckSelect<T, Prisma__balanceClient<balance | null >, Prisma__balanceClient<balanceGetPayload<T> | null >>

    /**
     * Find zero or more Balances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balanceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Balances
     * const balances = await prisma.balance.findMany()
     * 
     * // Get first 10 Balances
     * const balances = await prisma.balance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const balanceWithIdOnly = await prisma.balance.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends balanceFindManyArgs>(
      args?: SelectSubset<T, balanceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<balance>>, PrismaPromise<Array<balanceGetPayload<T>>>>

    /**
     * Create a Balance.
     * @param {balanceCreateArgs} args - Arguments to create a Balance.
     * @example
     * // Create one Balance
     * const Balance = await prisma.balance.create({
     *   data: {
     *     // ... data to create a Balance
     *   }
     * })
     * 
    **/
    create<T extends balanceCreateArgs>(
      args: SelectSubset<T, balanceCreateArgs>
    ): CheckSelect<T, Prisma__balanceClient<balance>, Prisma__balanceClient<balanceGetPayload<T>>>

    /**
     * Create many Balances.
     *     @param {balanceCreateManyArgs} args - Arguments to create many Balances.
     *     @example
     *     // Create many Balances
     *     const balance = await prisma.balance.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends balanceCreateManyArgs>(
      args?: SelectSubset<T, balanceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Balance.
     * @param {balanceDeleteArgs} args - Arguments to delete one Balance.
     * @example
     * // Delete one Balance
     * const Balance = await prisma.balance.delete({
     *   where: {
     *     // ... filter to delete one Balance
     *   }
     * })
     * 
    **/
    delete<T extends balanceDeleteArgs>(
      args: SelectSubset<T, balanceDeleteArgs>
    ): CheckSelect<T, Prisma__balanceClient<balance>, Prisma__balanceClient<balanceGetPayload<T>>>

    /**
     * Update one Balance.
     * @param {balanceUpdateArgs} args - Arguments to update one Balance.
     * @example
     * // Update one Balance
     * const balance = await prisma.balance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends balanceUpdateArgs>(
      args: SelectSubset<T, balanceUpdateArgs>
    ): CheckSelect<T, Prisma__balanceClient<balance>, Prisma__balanceClient<balanceGetPayload<T>>>

    /**
     * Delete zero or more Balances.
     * @param {balanceDeleteManyArgs} args - Arguments to filter Balances to delete.
     * @example
     * // Delete a few Balances
     * const { count } = await prisma.balance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends balanceDeleteManyArgs>(
      args?: SelectSubset<T, balanceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Balances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Balances
     * const balance = await prisma.balance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends balanceUpdateManyArgs>(
      args: SelectSubset<T, balanceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Balance.
     * @param {balanceUpsertArgs} args - Arguments to update or create a Balance.
     * @example
     * // Update or create a Balance
     * const balance = await prisma.balance.upsert({
     *   create: {
     *     // ... data to create a Balance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Balance we want to update
     *   }
     * })
    **/
    upsert<T extends balanceUpsertArgs>(
      args: SelectSubset<T, balanceUpsertArgs>
    ): CheckSelect<T, Prisma__balanceClient<balance>, Prisma__balanceClient<balanceGetPayload<T>>>

    /**
     * Count the number of Balances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balanceCountArgs} args - Arguments to filter Balances to count.
     * @example
     * // Count the number of Balances
     * const count = await prisma.balance.count({
     *   where: {
     *     // ... the filter for the Balances we want to count
     *   }
     * })
    **/
    count<T extends balanceCountArgs>(
      args?: Subset<T, balanceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BalanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Balance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BalanceAggregateArgs>(args: Subset<T, BalanceAggregateArgs>): PrismaPromise<GetBalanceAggregateType<T>>

    /**
     * Group by Balance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BalanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BalanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BalanceGroupByArgs['orderBy'] }
        : { orderBy?: BalanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BalanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalanceGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for balance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__balanceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * balance findUnique
   */
  export type balanceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the balance
     * 
    **/
    select?: balanceSelect | null
    /**
     * Throw an Error if a balance can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which balance to fetch.
     * 
    **/
    where: balanceWhereUniqueInput
  }


  /**
   * balance findFirst
   */
  export type balanceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the balance
     * 
    **/
    select?: balanceSelect | null
    /**
     * Throw an Error if a balance can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which balance to fetch.
     * 
    **/
    where?: balanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balances to fetch.
     * 
    **/
    orderBy?: Enumerable<balanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for balances.
     * 
    **/
    cursor?: balanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balances.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of balances.
     * 
    **/
    distinct?: Enumerable<BalanceScalarFieldEnum>
  }


  /**
   * balance findMany
   */
  export type balanceFindManyArgs = {
    /**
     * Select specific fields to fetch from the balance
     * 
    **/
    select?: balanceSelect | null
    /**
     * Filter, which balances to fetch.
     * 
    **/
    where?: balanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balances to fetch.
     * 
    **/
    orderBy?: Enumerable<balanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing balances.
     * 
    **/
    cursor?: balanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balances.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BalanceScalarFieldEnum>
  }


  /**
   * balance create
   */
  export type balanceCreateArgs = {
    /**
     * Select specific fields to fetch from the balance
     * 
    **/
    select?: balanceSelect | null
    /**
     * The data needed to create a balance.
     * 
    **/
    data: XOR<balanceCreateInput, balanceUncheckedCreateInput>
  }


  /**
   * balance createMany
   */
  export type balanceCreateManyArgs = {
    data: Enumerable<balanceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * balance update
   */
  export type balanceUpdateArgs = {
    /**
     * Select specific fields to fetch from the balance
     * 
    **/
    select?: balanceSelect | null
    /**
     * The data needed to update a balance.
     * 
    **/
    data: XOR<balanceUpdateInput, balanceUncheckedUpdateInput>
    /**
     * Choose, which balance to update.
     * 
    **/
    where: balanceWhereUniqueInput
  }


  /**
   * balance updateMany
   */
  export type balanceUpdateManyArgs = {
    data: XOR<balanceUpdateManyMutationInput, balanceUncheckedUpdateManyInput>
    where?: balanceWhereInput
  }


  /**
   * balance upsert
   */
  export type balanceUpsertArgs = {
    /**
     * Select specific fields to fetch from the balance
     * 
    **/
    select?: balanceSelect | null
    /**
     * The filter to search for the balance to update in case it exists.
     * 
    **/
    where: balanceWhereUniqueInput
    /**
     * In case the balance found by the `where` argument doesn't exist, create a new balance with this data.
     * 
    **/
    create: XOR<balanceCreateInput, balanceUncheckedCreateInput>
    /**
     * In case the balance was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<balanceUpdateInput, balanceUncheckedUpdateInput>
  }


  /**
   * balance delete
   */
  export type balanceDeleteArgs = {
    /**
     * Select specific fields to fetch from the balance
     * 
    **/
    select?: balanceSelect | null
    /**
     * Filter which balance to delete.
     * 
    **/
    where: balanceWhereUniqueInput
  }


  /**
   * balance deleteMany
   */
  export type balanceDeleteManyArgs = {
    where?: balanceWhereInput
  }


  /**
   * balance without action
   */
  export type balanceArgs = {
    /**
     * Select specific fields to fetch from the balance
     * 
    **/
    select?: balanceSelect | null
  }



  /**
   * Model balance_history
   */


  export type AggregateBalance_history = {
    _count: Balance_historyCountAggregateOutputType | null
    _avg: Balance_historyAvgAggregateOutputType | null
    _sum: Balance_historySumAggregateOutputType | null
    _min: Balance_historyMinAggregateOutputType | null
    _max: Balance_historyMaxAggregateOutputType | null
  }

  export type Balance_historyAvgAggregateOutputType = {
    id: number | null
  }

  export type Balance_historySumAggregateOutputType = {
    id: number | null
  }

  export type Balance_historyMinAggregateOutputType = {
    id: number | null
    add_balance: string | null
    get_balance: string | null
    note: string | null
    report: boolean | null
    date_created: string | null
  }

  export type Balance_historyMaxAggregateOutputType = {
    id: number | null
    add_balance: string | null
    get_balance: string | null
    note: string | null
    report: boolean | null
    date_created: string | null
  }

  export type Balance_historyCountAggregateOutputType = {
    id: number
    add_balance: number
    get_balance: number
    note: number
    report: number
    date_created: number
    _all: number
  }


  export type Balance_historyAvgAggregateInputType = {
    id?: true
  }

  export type Balance_historySumAggregateInputType = {
    id?: true
  }

  export type Balance_historyMinAggregateInputType = {
    id?: true
    add_balance?: true
    get_balance?: true
    note?: true
    report?: true
    date_created?: true
  }

  export type Balance_historyMaxAggregateInputType = {
    id?: true
    add_balance?: true
    get_balance?: true
    note?: true
    report?: true
    date_created?: true
  }

  export type Balance_historyCountAggregateInputType = {
    id?: true
    add_balance?: true
    get_balance?: true
    note?: true
    report?: true
    date_created?: true
    _all?: true
  }

  export type Balance_historyAggregateArgs = {
    /**
     * Filter which balance_history to aggregate.
     * 
    **/
    where?: balance_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balance_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<balance_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: balance_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balance_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balance_histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned balance_histories
    **/
    _count?: true | Balance_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Balance_historyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Balance_historySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Balance_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Balance_historyMaxAggregateInputType
  }

  export type GetBalance_historyAggregateType<T extends Balance_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateBalance_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBalance_history[P]>
      : GetScalarType<T[P], AggregateBalance_history[P]>
  }




  export type Balance_historyGroupByArgs = {
    where?: balance_historyWhereInput
    orderBy?: Enumerable<balance_historyOrderByWithAggregationInput>
    by: Array<Balance_historyScalarFieldEnum>
    having?: balance_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Balance_historyCountAggregateInputType | true
    _avg?: Balance_historyAvgAggregateInputType
    _sum?: Balance_historySumAggregateInputType
    _min?: Balance_historyMinAggregateInputType
    _max?: Balance_historyMaxAggregateInputType
  }


  export type Balance_historyGroupByOutputType = {
    id: number
    add_balance: string | null
    get_balance: string | null
    note: string
    report: boolean
    date_created: string
    _count: Balance_historyCountAggregateOutputType | null
    _avg: Balance_historyAvgAggregateOutputType | null
    _sum: Balance_historySumAggregateOutputType | null
    _min: Balance_historyMinAggregateOutputType | null
    _max: Balance_historyMaxAggregateOutputType | null
  }

  type GetBalance_historyGroupByPayload<T extends Balance_historyGroupByArgs> = Promise<
    Array<
      PickArray<Balance_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Balance_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Balance_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Balance_historyGroupByOutputType[P]>
        }
      >
    >


  export type balance_historySelect = {
    id?: boolean
    add_balance?: boolean
    get_balance?: boolean
    note?: boolean
    report?: boolean
    date_created?: boolean
  }

  export type balance_historyGetPayload<
    S extends boolean | null | undefined | balance_historyArgs,
    U = keyof S
      > = S extends true
        ? balance_history
    : S extends undefined
    ? never
    : S extends balance_historyArgs | balance_historyFindManyArgs
    ?'include' extends U
    ? balance_history 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof balance_history ?balance_history [P]
  : 
     never
  } 
    : balance_history
  : balance_history


  type balance_historyCountArgs = Merge<
    Omit<balance_historyFindManyArgs, 'select' | 'include'> & {
      select?: Balance_historyCountAggregateInputType | true
    }
  >

  export interface balance_historyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Balance_history that matches the filter.
     * @param {balance_historyFindUniqueArgs} args - Arguments to find a Balance_history
     * @example
     * // Get one Balance_history
     * const balance_history = await prisma.balance_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends balance_historyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, balance_historyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'balance_history'> extends True ? CheckSelect<T, Prisma__balance_historyClient<balance_history>, Prisma__balance_historyClient<balance_historyGetPayload<T>>> : CheckSelect<T, Prisma__balance_historyClient<balance_history | null >, Prisma__balance_historyClient<balance_historyGetPayload<T> | null >>

    /**
     * Find the first Balance_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_historyFindFirstArgs} args - Arguments to find a Balance_history
     * @example
     * // Get one Balance_history
     * const balance_history = await prisma.balance_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends balance_historyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, balance_historyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'balance_history'> extends True ? CheckSelect<T, Prisma__balance_historyClient<balance_history>, Prisma__balance_historyClient<balance_historyGetPayload<T>>> : CheckSelect<T, Prisma__balance_historyClient<balance_history | null >, Prisma__balance_historyClient<balance_historyGetPayload<T> | null >>

    /**
     * Find zero or more Balance_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_historyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Balance_histories
     * const balance_histories = await prisma.balance_history.findMany()
     * 
     * // Get first 10 Balance_histories
     * const balance_histories = await prisma.balance_history.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const balance_historyWithIdOnly = await prisma.balance_history.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends balance_historyFindManyArgs>(
      args?: SelectSubset<T, balance_historyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<balance_history>>, PrismaPromise<Array<balance_historyGetPayload<T>>>>

    /**
     * Create a Balance_history.
     * @param {balance_historyCreateArgs} args - Arguments to create a Balance_history.
     * @example
     * // Create one Balance_history
     * const Balance_history = await prisma.balance_history.create({
     *   data: {
     *     // ... data to create a Balance_history
     *   }
     * })
     * 
    **/
    create<T extends balance_historyCreateArgs>(
      args: SelectSubset<T, balance_historyCreateArgs>
    ): CheckSelect<T, Prisma__balance_historyClient<balance_history>, Prisma__balance_historyClient<balance_historyGetPayload<T>>>

    /**
     * Create many Balance_histories.
     *     @param {balance_historyCreateManyArgs} args - Arguments to create many Balance_histories.
     *     @example
     *     // Create many Balance_histories
     *     const balance_history = await prisma.balance_history.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends balance_historyCreateManyArgs>(
      args?: SelectSubset<T, balance_historyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Balance_history.
     * @param {balance_historyDeleteArgs} args - Arguments to delete one Balance_history.
     * @example
     * // Delete one Balance_history
     * const Balance_history = await prisma.balance_history.delete({
     *   where: {
     *     // ... filter to delete one Balance_history
     *   }
     * })
     * 
    **/
    delete<T extends balance_historyDeleteArgs>(
      args: SelectSubset<T, balance_historyDeleteArgs>
    ): CheckSelect<T, Prisma__balance_historyClient<balance_history>, Prisma__balance_historyClient<balance_historyGetPayload<T>>>

    /**
     * Update one Balance_history.
     * @param {balance_historyUpdateArgs} args - Arguments to update one Balance_history.
     * @example
     * // Update one Balance_history
     * const balance_history = await prisma.balance_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends balance_historyUpdateArgs>(
      args: SelectSubset<T, balance_historyUpdateArgs>
    ): CheckSelect<T, Prisma__balance_historyClient<balance_history>, Prisma__balance_historyClient<balance_historyGetPayload<T>>>

    /**
     * Delete zero or more Balance_histories.
     * @param {balance_historyDeleteManyArgs} args - Arguments to filter Balance_histories to delete.
     * @example
     * // Delete a few Balance_histories
     * const { count } = await prisma.balance_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends balance_historyDeleteManyArgs>(
      args?: SelectSubset<T, balance_historyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Balance_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Balance_histories
     * const balance_history = await prisma.balance_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends balance_historyUpdateManyArgs>(
      args: SelectSubset<T, balance_historyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Balance_history.
     * @param {balance_historyUpsertArgs} args - Arguments to update or create a Balance_history.
     * @example
     * // Update or create a Balance_history
     * const balance_history = await prisma.balance_history.upsert({
     *   create: {
     *     // ... data to create a Balance_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Balance_history we want to update
     *   }
     * })
    **/
    upsert<T extends balance_historyUpsertArgs>(
      args: SelectSubset<T, balance_historyUpsertArgs>
    ): CheckSelect<T, Prisma__balance_historyClient<balance_history>, Prisma__balance_historyClient<balance_historyGetPayload<T>>>

    /**
     * Count the number of Balance_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_historyCountArgs} args - Arguments to filter Balance_histories to count.
     * @example
     * // Count the number of Balance_histories
     * const count = await prisma.balance_history.count({
     *   where: {
     *     // ... the filter for the Balance_histories we want to count
     *   }
     * })
    **/
    count<T extends balance_historyCountArgs>(
      args?: Subset<T, balance_historyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Balance_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Balance_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Balance_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Balance_historyAggregateArgs>(args: Subset<T, Balance_historyAggregateArgs>): PrismaPromise<GetBalance_historyAggregateType<T>>

    /**
     * Group by Balance_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Balance_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Balance_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Balance_historyGroupByArgs['orderBy'] }
        : { orderBy?: Balance_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Balance_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalance_historyGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for balance_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__balance_historyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * balance_history findUnique
   */
  export type balance_historyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the balance_history
     * 
    **/
    select?: balance_historySelect | null
    /**
     * Throw an Error if a balance_history can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which balance_history to fetch.
     * 
    **/
    where: balance_historyWhereUniqueInput
  }


  /**
   * balance_history findFirst
   */
  export type balance_historyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the balance_history
     * 
    **/
    select?: balance_historySelect | null
    /**
     * Throw an Error if a balance_history can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which balance_history to fetch.
     * 
    **/
    where?: balance_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balance_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<balance_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for balance_histories.
     * 
    **/
    cursor?: balance_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balance_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balance_histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of balance_histories.
     * 
    **/
    distinct?: Enumerable<Balance_historyScalarFieldEnum>
  }


  /**
   * balance_history findMany
   */
  export type balance_historyFindManyArgs = {
    /**
     * Select specific fields to fetch from the balance_history
     * 
    **/
    select?: balance_historySelect | null
    /**
     * Filter, which balance_histories to fetch.
     * 
    **/
    where?: balance_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balance_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<balance_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing balance_histories.
     * 
    **/
    cursor?: balance_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balance_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balance_histories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Balance_historyScalarFieldEnum>
  }


  /**
   * balance_history create
   */
  export type balance_historyCreateArgs = {
    /**
     * Select specific fields to fetch from the balance_history
     * 
    **/
    select?: balance_historySelect | null
    /**
     * The data needed to create a balance_history.
     * 
    **/
    data: XOR<balance_historyCreateInput, balance_historyUncheckedCreateInput>
  }


  /**
   * balance_history createMany
   */
  export type balance_historyCreateManyArgs = {
    data: Enumerable<balance_historyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * balance_history update
   */
  export type balance_historyUpdateArgs = {
    /**
     * Select specific fields to fetch from the balance_history
     * 
    **/
    select?: balance_historySelect | null
    /**
     * The data needed to update a balance_history.
     * 
    **/
    data: XOR<balance_historyUpdateInput, balance_historyUncheckedUpdateInput>
    /**
     * Choose, which balance_history to update.
     * 
    **/
    where: balance_historyWhereUniqueInput
  }


  /**
   * balance_history updateMany
   */
  export type balance_historyUpdateManyArgs = {
    data: XOR<balance_historyUpdateManyMutationInput, balance_historyUncheckedUpdateManyInput>
    where?: balance_historyWhereInput
  }


  /**
   * balance_history upsert
   */
  export type balance_historyUpsertArgs = {
    /**
     * Select specific fields to fetch from the balance_history
     * 
    **/
    select?: balance_historySelect | null
    /**
     * The filter to search for the balance_history to update in case it exists.
     * 
    **/
    where: balance_historyWhereUniqueInput
    /**
     * In case the balance_history found by the `where` argument doesn't exist, create a new balance_history with this data.
     * 
    **/
    create: XOR<balance_historyCreateInput, balance_historyUncheckedCreateInput>
    /**
     * In case the balance_history was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<balance_historyUpdateInput, balance_historyUncheckedUpdateInput>
  }


  /**
   * balance_history delete
   */
  export type balance_historyDeleteArgs = {
    /**
     * Select specific fields to fetch from the balance_history
     * 
    **/
    select?: balance_historySelect | null
    /**
     * Filter which balance_history to delete.
     * 
    **/
    where: balance_historyWhereUniqueInput
  }


  /**
   * balance_history deleteMany
   */
  export type balance_historyDeleteManyArgs = {
    where?: balance_historyWhereInput
  }


  /**
   * balance_history without action
   */
  export type balance_historyArgs = {
    /**
     * Select specific fields to fetch from the balance_history
     * 
    **/
    select?: balance_historySelect | null
  }



  /**
   * Model costs
   */


  export type AggregateCosts = {
    _count: CostsCountAggregateOutputType | null
    _avg: CostsAvgAggregateOutputType | null
    _sum: CostsSumAggregateOutputType | null
    _min: CostsMinAggregateOutputType | null
    _max: CostsMaxAggregateOutputType | null
  }

  export type CostsAvgAggregateOutputType = {
    id: number | null
  }

  export type CostsSumAggregateOutputType = {
    id: number | null
  }

  export type CostsMinAggregateOutputType = {
    id: number | null
    name: string | null
    number: string | null
    amount: string | null
    price: string | null
    note: string | null
    is_serio: boolean | null
    date_created: string | null
  }

  export type CostsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    number: string | null
    amount: string | null
    price: string | null
    note: string | null
    is_serio: boolean | null
    date_created: string | null
  }

  export type CostsCountAggregateOutputType = {
    id: number
    name: number
    number: number
    amount: number
    price: number
    note: number
    is_serio: number
    date_created: number
    _all: number
  }


  export type CostsAvgAggregateInputType = {
    id?: true
  }

  export type CostsSumAggregateInputType = {
    id?: true
  }

  export type CostsMinAggregateInputType = {
    id?: true
    name?: true
    number?: true
    amount?: true
    price?: true
    note?: true
    is_serio?: true
    date_created?: true
  }

  export type CostsMaxAggregateInputType = {
    id?: true
    name?: true
    number?: true
    amount?: true
    price?: true
    note?: true
    is_serio?: true
    date_created?: true
  }

  export type CostsCountAggregateInputType = {
    id?: true
    name?: true
    number?: true
    amount?: true
    price?: true
    note?: true
    is_serio?: true
    date_created?: true
    _all?: true
  }

  export type CostsAggregateArgs = {
    /**
     * Filter which costs to aggregate.
     * 
    **/
    where?: costsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of costs to fetch.
     * 
    **/
    orderBy?: Enumerable<costsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: costsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` costs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` costs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned costs
    **/
    _count?: true | CostsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CostsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CostsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CostsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CostsMaxAggregateInputType
  }

  export type GetCostsAggregateType<T extends CostsAggregateArgs> = {
        [P in keyof T & keyof AggregateCosts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCosts[P]>
      : GetScalarType<T[P], AggregateCosts[P]>
  }




  export type CostsGroupByArgs = {
    where?: costsWhereInput
    orderBy?: Enumerable<costsOrderByWithAggregationInput>
    by: Array<CostsScalarFieldEnum>
    having?: costsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CostsCountAggregateInputType | true
    _avg?: CostsAvgAggregateInputType
    _sum?: CostsSumAggregateInputType
    _min?: CostsMinAggregateInputType
    _max?: CostsMaxAggregateInputType
  }


  export type CostsGroupByOutputType = {
    id: number
    name: string
    number: string
    amount: string
    price: string
    note: string
    is_serio: boolean | null
    date_created: string
    _count: CostsCountAggregateOutputType | null
    _avg: CostsAvgAggregateOutputType | null
    _sum: CostsSumAggregateOutputType | null
    _min: CostsMinAggregateOutputType | null
    _max: CostsMaxAggregateOutputType | null
  }

  type GetCostsGroupByPayload<T extends CostsGroupByArgs> = Promise<
    Array<
      PickArray<CostsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CostsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CostsGroupByOutputType[P]>
            : GetScalarType<T[P], CostsGroupByOutputType[P]>
        }
      >
    >


  export type costsSelect = {
    id?: boolean
    name?: boolean
    number?: boolean
    amount?: boolean
    price?: boolean
    note?: boolean
    is_serio?: boolean
    date_created?: boolean
  }

  export type costsGetPayload<
    S extends boolean | null | undefined | costsArgs,
    U = keyof S
      > = S extends true
        ? costs
    : S extends undefined
    ? never
    : S extends costsArgs | costsFindManyArgs
    ?'include' extends U
    ? costs 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof costs ?costs [P]
  : 
     never
  } 
    : costs
  : costs


  type costsCountArgs = Merge<
    Omit<costsFindManyArgs, 'select' | 'include'> & {
      select?: CostsCountAggregateInputType | true
    }
  >

  export interface costsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Costs that matches the filter.
     * @param {costsFindUniqueArgs} args - Arguments to find a Costs
     * @example
     * // Get one Costs
     * const costs = await prisma.costs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends costsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, costsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'costs'> extends True ? CheckSelect<T, Prisma__costsClient<costs>, Prisma__costsClient<costsGetPayload<T>>> : CheckSelect<T, Prisma__costsClient<costs | null >, Prisma__costsClient<costsGetPayload<T> | null >>

    /**
     * Find the first Costs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsFindFirstArgs} args - Arguments to find a Costs
     * @example
     * // Get one Costs
     * const costs = await prisma.costs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends costsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, costsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'costs'> extends True ? CheckSelect<T, Prisma__costsClient<costs>, Prisma__costsClient<costsGetPayload<T>>> : CheckSelect<T, Prisma__costsClient<costs | null >, Prisma__costsClient<costsGetPayload<T> | null >>

    /**
     * Find zero or more Costs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Costs
     * const costs = await prisma.costs.findMany()
     * 
     * // Get first 10 Costs
     * const costs = await prisma.costs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const costsWithIdOnly = await prisma.costs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends costsFindManyArgs>(
      args?: SelectSubset<T, costsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<costs>>, PrismaPromise<Array<costsGetPayload<T>>>>

    /**
     * Create a Costs.
     * @param {costsCreateArgs} args - Arguments to create a Costs.
     * @example
     * // Create one Costs
     * const Costs = await prisma.costs.create({
     *   data: {
     *     // ... data to create a Costs
     *   }
     * })
     * 
    **/
    create<T extends costsCreateArgs>(
      args: SelectSubset<T, costsCreateArgs>
    ): CheckSelect<T, Prisma__costsClient<costs>, Prisma__costsClient<costsGetPayload<T>>>

    /**
     * Create many Costs.
     *     @param {costsCreateManyArgs} args - Arguments to create many Costs.
     *     @example
     *     // Create many Costs
     *     const costs = await prisma.costs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends costsCreateManyArgs>(
      args?: SelectSubset<T, costsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Costs.
     * @param {costsDeleteArgs} args - Arguments to delete one Costs.
     * @example
     * // Delete one Costs
     * const Costs = await prisma.costs.delete({
     *   where: {
     *     // ... filter to delete one Costs
     *   }
     * })
     * 
    **/
    delete<T extends costsDeleteArgs>(
      args: SelectSubset<T, costsDeleteArgs>
    ): CheckSelect<T, Prisma__costsClient<costs>, Prisma__costsClient<costsGetPayload<T>>>

    /**
     * Update one Costs.
     * @param {costsUpdateArgs} args - Arguments to update one Costs.
     * @example
     * // Update one Costs
     * const costs = await prisma.costs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends costsUpdateArgs>(
      args: SelectSubset<T, costsUpdateArgs>
    ): CheckSelect<T, Prisma__costsClient<costs>, Prisma__costsClient<costsGetPayload<T>>>

    /**
     * Delete zero or more Costs.
     * @param {costsDeleteManyArgs} args - Arguments to filter Costs to delete.
     * @example
     * // Delete a few Costs
     * const { count } = await prisma.costs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends costsDeleteManyArgs>(
      args?: SelectSubset<T, costsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Costs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Costs
     * const costs = await prisma.costs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends costsUpdateManyArgs>(
      args: SelectSubset<T, costsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Costs.
     * @param {costsUpsertArgs} args - Arguments to update or create a Costs.
     * @example
     * // Update or create a Costs
     * const costs = await prisma.costs.upsert({
     *   create: {
     *     // ... data to create a Costs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Costs we want to update
     *   }
     * })
    **/
    upsert<T extends costsUpsertArgs>(
      args: SelectSubset<T, costsUpsertArgs>
    ): CheckSelect<T, Prisma__costsClient<costs>, Prisma__costsClient<costsGetPayload<T>>>

    /**
     * Count the number of Costs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {costsCountArgs} args - Arguments to filter Costs to count.
     * @example
     * // Count the number of Costs
     * const count = await prisma.costs.count({
     *   where: {
     *     // ... the filter for the Costs we want to count
     *   }
     * })
    **/
    count<T extends costsCountArgs>(
      args?: Subset<T, costsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CostsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Costs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CostsAggregateArgs>(args: Subset<T, CostsAggregateArgs>): PrismaPromise<GetCostsAggregateType<T>>

    /**
     * Group by Costs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CostsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CostsGroupByArgs['orderBy'] }
        : { orderBy?: CostsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CostsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCostsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for costs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__costsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * costs findUnique
   */
  export type costsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the costs
     * 
    **/
    select?: costsSelect | null
    /**
     * Throw an Error if a costs can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which costs to fetch.
     * 
    **/
    where: costsWhereUniqueInput
  }


  /**
   * costs findFirst
   */
  export type costsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the costs
     * 
    **/
    select?: costsSelect | null
    /**
     * Throw an Error if a costs can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which costs to fetch.
     * 
    **/
    where?: costsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of costs to fetch.
     * 
    **/
    orderBy?: Enumerable<costsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for costs.
     * 
    **/
    cursor?: costsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` costs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` costs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of costs.
     * 
    **/
    distinct?: Enumerable<CostsScalarFieldEnum>
  }


  /**
   * costs findMany
   */
  export type costsFindManyArgs = {
    /**
     * Select specific fields to fetch from the costs
     * 
    **/
    select?: costsSelect | null
    /**
     * Filter, which costs to fetch.
     * 
    **/
    where?: costsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of costs to fetch.
     * 
    **/
    orderBy?: Enumerable<costsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing costs.
     * 
    **/
    cursor?: costsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` costs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` costs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CostsScalarFieldEnum>
  }


  /**
   * costs create
   */
  export type costsCreateArgs = {
    /**
     * Select specific fields to fetch from the costs
     * 
    **/
    select?: costsSelect | null
    /**
     * The data needed to create a costs.
     * 
    **/
    data: XOR<costsCreateInput, costsUncheckedCreateInput>
  }


  /**
   * costs createMany
   */
  export type costsCreateManyArgs = {
    data: Enumerable<costsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * costs update
   */
  export type costsUpdateArgs = {
    /**
     * Select specific fields to fetch from the costs
     * 
    **/
    select?: costsSelect | null
    /**
     * The data needed to update a costs.
     * 
    **/
    data: XOR<costsUpdateInput, costsUncheckedUpdateInput>
    /**
     * Choose, which costs to update.
     * 
    **/
    where: costsWhereUniqueInput
  }


  /**
   * costs updateMany
   */
  export type costsUpdateManyArgs = {
    data: XOR<costsUpdateManyMutationInput, costsUncheckedUpdateManyInput>
    where?: costsWhereInput
  }


  /**
   * costs upsert
   */
  export type costsUpsertArgs = {
    /**
     * Select specific fields to fetch from the costs
     * 
    **/
    select?: costsSelect | null
    /**
     * The filter to search for the costs to update in case it exists.
     * 
    **/
    where: costsWhereUniqueInput
    /**
     * In case the costs found by the `where` argument doesn't exist, create a new costs with this data.
     * 
    **/
    create: XOR<costsCreateInput, costsUncheckedCreateInput>
    /**
     * In case the costs was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<costsUpdateInput, costsUncheckedUpdateInput>
  }


  /**
   * costs delete
   */
  export type costsDeleteArgs = {
    /**
     * Select specific fields to fetch from the costs
     * 
    **/
    select?: costsSelect | null
    /**
     * Filter which costs to delete.
     * 
    **/
    where: costsWhereUniqueInput
  }


  /**
   * costs deleteMany
   */
  export type costsDeleteManyArgs = {
    where?: costsWhereInput
  }


  /**
   * costs without action
   */
  export type costsArgs = {
    /**
     * Select specific fields to fetch from the costs
     * 
    **/
    select?: costsSelect | null
  }



  /**
   * Model dress
   */


  export type AggregateDress = {
    _count: DressCountAggregateOutputType | null
    _avg: DressAvgAggregateOutputType | null
    _sum: DressSumAggregateOutputType | null
    _min: DressMinAggregateOutputType | null
    _max: DressMaxAggregateOutputType | null
  }

  export type DressAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type DressSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type DressMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: string | null
    img: string | null
    date_created: string | null
    user_id: number | null
  }

  export type DressMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: string | null
    img: string | null
    date_created: string | null
    user_id: number | null
  }

  export type DressCountAggregateOutputType = {
    id: number
    name: number
    price: number
    img: number
    date_created: number
    user_id: number
    _all: number
  }


  export type DressAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type DressSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type DressMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    img?: true
    date_created?: true
    user_id?: true
  }

  export type DressMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    img?: true
    date_created?: true
    user_id?: true
  }

  export type DressCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    img?: true
    date_created?: true
    user_id?: true
    _all?: true
  }

  export type DressAggregateArgs = {
    /**
     * Filter which dress to aggregate.
     * 
    **/
    where?: dressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dresses to fetch.
     * 
    **/
    orderBy?: Enumerable<dressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: dressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dresses
    **/
    _count?: true | DressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DressMaxAggregateInputType
  }

  export type GetDressAggregateType<T extends DressAggregateArgs> = {
        [P in keyof T & keyof AggregateDress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDress[P]>
      : GetScalarType<T[P], AggregateDress[P]>
  }




  export type DressGroupByArgs = {
    where?: dressWhereInput
    orderBy?: Enumerable<dressOrderByWithAggregationInput>
    by: Array<DressScalarFieldEnum>
    having?: dressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DressCountAggregateInputType | true
    _avg?: DressAvgAggregateInputType
    _sum?: DressSumAggregateInputType
    _min?: DressMinAggregateInputType
    _max?: DressMaxAggregateInputType
  }


  export type DressGroupByOutputType = {
    id: number
    name: string
    price: string
    img: string
    date_created: string
    user_id: number
    _count: DressCountAggregateOutputType | null
    _avg: DressAvgAggregateOutputType | null
    _sum: DressSumAggregateOutputType | null
    _min: DressMinAggregateOutputType | null
    _max: DressMaxAggregateOutputType | null
  }

  type GetDressGroupByPayload<T extends DressGroupByArgs> = Promise<
    Array<
      PickArray<DressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DressGroupByOutputType[P]>
            : GetScalarType<T[P], DressGroupByOutputType[P]>
        }
      >
    >


  export type dressSelect = {
    id?: boolean
    name?: boolean
    price?: boolean
    img?: boolean
    date_created?: boolean
    user_id?: boolean
    users?: boolean | usersArgs
    sale?: boolean | saleFindManyArgs
    _count?: boolean | DressCountOutputTypeArgs
  }

  export type dressInclude = {
    users?: boolean | usersArgs
    sale?: boolean | saleFindManyArgs
    _count?: boolean | DressCountOutputTypeArgs
  }

  export type dressGetPayload<
    S extends boolean | null | undefined | dressArgs,
    U = keyof S
      > = S extends true
        ? dress
    : S extends undefined
    ? never
    : S extends dressArgs | dressFindManyArgs
    ?'include' extends U
    ? dress  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? usersGetPayload<S['include'][P]> :
        P extends 'sale'
        ? Array < saleGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? DressCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof dress ?dress [P]
  : 
          P extends 'users'
        ? usersGetPayload<S['select'][P]> :
        P extends 'sale'
        ? Array < saleGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? DressCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : dress
  : dress


  type dressCountArgs = Merge<
    Omit<dressFindManyArgs, 'select' | 'include'> & {
      select?: DressCountAggregateInputType | true
    }
  >

  export interface dressDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Dress that matches the filter.
     * @param {dressFindUniqueArgs} args - Arguments to find a Dress
     * @example
     * // Get one Dress
     * const dress = await prisma.dress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends dressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, dressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'dress'> extends True ? CheckSelect<T, Prisma__dressClient<dress>, Prisma__dressClient<dressGetPayload<T>>> : CheckSelect<T, Prisma__dressClient<dress | null >, Prisma__dressClient<dressGetPayload<T> | null >>

    /**
     * Find the first Dress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dressFindFirstArgs} args - Arguments to find a Dress
     * @example
     * // Get one Dress
     * const dress = await prisma.dress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends dressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, dressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'dress'> extends True ? CheckSelect<T, Prisma__dressClient<dress>, Prisma__dressClient<dressGetPayload<T>>> : CheckSelect<T, Prisma__dressClient<dress | null >, Prisma__dressClient<dressGetPayload<T> | null >>

    /**
     * Find zero or more Dresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dresses
     * const dresses = await prisma.dress.findMany()
     * 
     * // Get first 10 Dresses
     * const dresses = await prisma.dress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dressWithIdOnly = await prisma.dress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends dressFindManyArgs>(
      args?: SelectSubset<T, dressFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<dress>>, PrismaPromise<Array<dressGetPayload<T>>>>

    /**
     * Create a Dress.
     * @param {dressCreateArgs} args - Arguments to create a Dress.
     * @example
     * // Create one Dress
     * const Dress = await prisma.dress.create({
     *   data: {
     *     // ... data to create a Dress
     *   }
     * })
     * 
    **/
    create<T extends dressCreateArgs>(
      args: SelectSubset<T, dressCreateArgs>
    ): CheckSelect<T, Prisma__dressClient<dress>, Prisma__dressClient<dressGetPayload<T>>>

    /**
     * Create many Dresses.
     *     @param {dressCreateManyArgs} args - Arguments to create many Dresses.
     *     @example
     *     // Create many Dresses
     *     const dress = await prisma.dress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends dressCreateManyArgs>(
      args?: SelectSubset<T, dressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Dress.
     * @param {dressDeleteArgs} args - Arguments to delete one Dress.
     * @example
     * // Delete one Dress
     * const Dress = await prisma.dress.delete({
     *   where: {
     *     // ... filter to delete one Dress
     *   }
     * })
     * 
    **/
    delete<T extends dressDeleteArgs>(
      args: SelectSubset<T, dressDeleteArgs>
    ): CheckSelect<T, Prisma__dressClient<dress>, Prisma__dressClient<dressGetPayload<T>>>

    /**
     * Update one Dress.
     * @param {dressUpdateArgs} args - Arguments to update one Dress.
     * @example
     * // Update one Dress
     * const dress = await prisma.dress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends dressUpdateArgs>(
      args: SelectSubset<T, dressUpdateArgs>
    ): CheckSelect<T, Prisma__dressClient<dress>, Prisma__dressClient<dressGetPayload<T>>>

    /**
     * Delete zero or more Dresses.
     * @param {dressDeleteManyArgs} args - Arguments to filter Dresses to delete.
     * @example
     * // Delete a few Dresses
     * const { count } = await prisma.dress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends dressDeleteManyArgs>(
      args?: SelectSubset<T, dressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dresses
     * const dress = await prisma.dress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends dressUpdateManyArgs>(
      args: SelectSubset<T, dressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Dress.
     * @param {dressUpsertArgs} args - Arguments to update or create a Dress.
     * @example
     * // Update or create a Dress
     * const dress = await prisma.dress.upsert({
     *   create: {
     *     // ... data to create a Dress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dress we want to update
     *   }
     * })
    **/
    upsert<T extends dressUpsertArgs>(
      args: SelectSubset<T, dressUpsertArgs>
    ): CheckSelect<T, Prisma__dressClient<dress>, Prisma__dressClient<dressGetPayload<T>>>

    /**
     * Count the number of Dresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dressCountArgs} args - Arguments to filter Dresses to count.
     * @example
     * // Count the number of Dresses
     * const count = await prisma.dress.count({
     *   where: {
     *     // ... the filter for the Dresses we want to count
     *   }
     * })
    **/
    count<T extends dressCountArgs>(
      args?: Subset<T, dressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DressAggregateArgs>(args: Subset<T, DressAggregateArgs>): PrismaPromise<GetDressAggregateType<T>>

    /**
     * Group by Dress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DressGroupByArgs['orderBy'] }
        : { orderBy?: DressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDressGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for dress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__dressClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    sale<T extends saleFindManyArgs = {}>(args?: Subset<T, saleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sale>>, PrismaPromise<Array<saleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * dress findUnique
   */
  export type dressFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the dress
     * 
    **/
    select?: dressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: dressInclude | null
    /**
     * Throw an Error if a dress can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which dress to fetch.
     * 
    **/
    where: dressWhereUniqueInput
  }


  /**
   * dress findFirst
   */
  export type dressFindFirstArgs = {
    /**
     * Select specific fields to fetch from the dress
     * 
    **/
    select?: dressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: dressInclude | null
    /**
     * Throw an Error if a dress can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which dress to fetch.
     * 
    **/
    where?: dressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dresses to fetch.
     * 
    **/
    orderBy?: Enumerable<dressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dresses.
     * 
    **/
    cursor?: dressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dresses.
     * 
    **/
    distinct?: Enumerable<DressScalarFieldEnum>
  }


  /**
   * dress findMany
   */
  export type dressFindManyArgs = {
    /**
     * Select specific fields to fetch from the dress
     * 
    **/
    select?: dressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: dressInclude | null
    /**
     * Filter, which dresses to fetch.
     * 
    **/
    where?: dressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dresses to fetch.
     * 
    **/
    orderBy?: Enumerable<dressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dresses.
     * 
    **/
    cursor?: dressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DressScalarFieldEnum>
  }


  /**
   * dress create
   */
  export type dressCreateArgs = {
    /**
     * Select specific fields to fetch from the dress
     * 
    **/
    select?: dressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: dressInclude | null
    /**
     * The data needed to create a dress.
     * 
    **/
    data: XOR<dressCreateInput, dressUncheckedCreateInput>
  }


  /**
   * dress createMany
   */
  export type dressCreateManyArgs = {
    data: Enumerable<dressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * dress update
   */
  export type dressUpdateArgs = {
    /**
     * Select specific fields to fetch from the dress
     * 
    **/
    select?: dressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: dressInclude | null
    /**
     * The data needed to update a dress.
     * 
    **/
    data: XOR<dressUpdateInput, dressUncheckedUpdateInput>
    /**
     * Choose, which dress to update.
     * 
    **/
    where: dressWhereUniqueInput
  }


  /**
   * dress updateMany
   */
  export type dressUpdateManyArgs = {
    data: XOR<dressUpdateManyMutationInput, dressUncheckedUpdateManyInput>
    where?: dressWhereInput
  }


  /**
   * dress upsert
   */
  export type dressUpsertArgs = {
    /**
     * Select specific fields to fetch from the dress
     * 
    **/
    select?: dressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: dressInclude | null
    /**
     * The filter to search for the dress to update in case it exists.
     * 
    **/
    where: dressWhereUniqueInput
    /**
     * In case the dress found by the `where` argument doesn't exist, create a new dress with this data.
     * 
    **/
    create: XOR<dressCreateInput, dressUncheckedCreateInput>
    /**
     * In case the dress was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<dressUpdateInput, dressUncheckedUpdateInput>
  }


  /**
   * dress delete
   */
  export type dressDeleteArgs = {
    /**
     * Select specific fields to fetch from the dress
     * 
    **/
    select?: dressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: dressInclude | null
    /**
     * Filter which dress to delete.
     * 
    **/
    where: dressWhereUniqueInput
  }


  /**
   * dress deleteMany
   */
  export type dressDeleteManyArgs = {
    where?: dressWhereInput
  }


  /**
   * dress without action
   */
  export type dressArgs = {
    /**
     * Select specific fields to fetch from the dress
     * 
    **/
    select?: dressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: dressInclude | null
  }



  /**
   * Model salonlist
   */


  export type AggregateSalonlist = {
    _count: SalonlistCountAggregateOutputType | null
    _avg: SalonlistAvgAggregateOutputType | null
    _sum: SalonlistSumAggregateOutputType | null
    _min: SalonlistMinAggregateOutputType | null
    _max: SalonlistMaxAggregateOutputType | null
  }

  export type SalonlistAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type SalonlistSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type SalonlistMinAggregateOutputType = {
    id: number | null
    salonchi_name: string | null
    salon_name: string | null
    address: string | null
    phone: string | null
    date_created: string | null
    user_id: number | null
  }

  export type SalonlistMaxAggregateOutputType = {
    id: number | null
    salonchi_name: string | null
    salon_name: string | null
    address: string | null
    phone: string | null
    date_created: string | null
    user_id: number | null
  }

  export type SalonlistCountAggregateOutputType = {
    id: number
    salonchi_name: number
    salon_name: number
    address: number
    phone: number
    date_created: number
    user_id: number
    _all: number
  }


  export type SalonlistAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type SalonlistSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type SalonlistMinAggregateInputType = {
    id?: true
    salonchi_name?: true
    salon_name?: true
    address?: true
    phone?: true
    date_created?: true
    user_id?: true
  }

  export type SalonlistMaxAggregateInputType = {
    id?: true
    salonchi_name?: true
    salon_name?: true
    address?: true
    phone?: true
    date_created?: true
    user_id?: true
  }

  export type SalonlistCountAggregateInputType = {
    id?: true
    salonchi_name?: true
    salon_name?: true
    address?: true
    phone?: true
    date_created?: true
    user_id?: true
    _all?: true
  }

  export type SalonlistAggregateArgs = {
    /**
     * Filter which salonlist to aggregate.
     * 
    **/
    where?: salonlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salonlists to fetch.
     * 
    **/
    orderBy?: Enumerable<salonlistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: salonlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salonlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salonlists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned salonlists
    **/
    _count?: true | SalonlistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalonlistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalonlistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalonlistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalonlistMaxAggregateInputType
  }

  export type GetSalonlistAggregateType<T extends SalonlistAggregateArgs> = {
        [P in keyof T & keyof AggregateSalonlist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalonlist[P]>
      : GetScalarType<T[P], AggregateSalonlist[P]>
  }




  export type SalonlistGroupByArgs = {
    where?: salonlistWhereInput
    orderBy?: Enumerable<salonlistOrderByWithAggregationInput>
    by: Array<SalonlistScalarFieldEnum>
    having?: salonlistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalonlistCountAggregateInputType | true
    _avg?: SalonlistAvgAggregateInputType
    _sum?: SalonlistSumAggregateInputType
    _min?: SalonlistMinAggregateInputType
    _max?: SalonlistMaxAggregateInputType
  }


  export type SalonlistGroupByOutputType = {
    id: number
    salonchi_name: string
    salon_name: string
    address: string
    phone: string
    date_created: string
    user_id: number
    _count: SalonlistCountAggregateOutputType | null
    _avg: SalonlistAvgAggregateOutputType | null
    _sum: SalonlistSumAggregateOutputType | null
    _min: SalonlistMinAggregateOutputType | null
    _max: SalonlistMaxAggregateOutputType | null
  }

  type GetSalonlistGroupByPayload<T extends SalonlistGroupByArgs> = Promise<
    Array<
      PickArray<SalonlistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalonlistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalonlistGroupByOutputType[P]>
            : GetScalarType<T[P], SalonlistGroupByOutputType[P]>
        }
      >
    >


  export type salonlistSelect = {
    id?: boolean
    salonchi_name?: boolean
    salon_name?: boolean
    address?: boolean
    phone?: boolean
    date_created?: boolean
    user_id?: boolean
    sale?: boolean | saleFindManyArgs
    _count?: boolean | SalonlistCountOutputTypeArgs
  }

  export type salonlistInclude = {
    sale?: boolean | saleFindManyArgs
    _count?: boolean | SalonlistCountOutputTypeArgs
  }

  export type salonlistGetPayload<
    S extends boolean | null | undefined | salonlistArgs,
    U = keyof S
      > = S extends true
        ? salonlist
    : S extends undefined
    ? never
    : S extends salonlistArgs | salonlistFindManyArgs
    ?'include' extends U
    ? salonlist  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sale'
        ? Array < saleGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? SalonlistCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof salonlist ?salonlist [P]
  : 
          P extends 'sale'
        ? Array < saleGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? SalonlistCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : salonlist
  : salonlist


  type salonlistCountArgs = Merge<
    Omit<salonlistFindManyArgs, 'select' | 'include'> & {
      select?: SalonlistCountAggregateInputType | true
    }
  >

  export interface salonlistDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Salonlist that matches the filter.
     * @param {salonlistFindUniqueArgs} args - Arguments to find a Salonlist
     * @example
     * // Get one Salonlist
     * const salonlist = await prisma.salonlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends salonlistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, salonlistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'salonlist'> extends True ? CheckSelect<T, Prisma__salonlistClient<salonlist>, Prisma__salonlistClient<salonlistGetPayload<T>>> : CheckSelect<T, Prisma__salonlistClient<salonlist | null >, Prisma__salonlistClient<salonlistGetPayload<T> | null >>

    /**
     * Find the first Salonlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonlistFindFirstArgs} args - Arguments to find a Salonlist
     * @example
     * // Get one Salonlist
     * const salonlist = await prisma.salonlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends salonlistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, salonlistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'salonlist'> extends True ? CheckSelect<T, Prisma__salonlistClient<salonlist>, Prisma__salonlistClient<salonlistGetPayload<T>>> : CheckSelect<T, Prisma__salonlistClient<salonlist | null >, Prisma__salonlistClient<salonlistGetPayload<T> | null >>

    /**
     * Find zero or more Salonlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonlistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Salonlists
     * const salonlists = await prisma.salonlist.findMany()
     * 
     * // Get first 10 Salonlists
     * const salonlists = await prisma.salonlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salonlistWithIdOnly = await prisma.salonlist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends salonlistFindManyArgs>(
      args?: SelectSubset<T, salonlistFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<salonlist>>, PrismaPromise<Array<salonlistGetPayload<T>>>>

    /**
     * Create a Salonlist.
     * @param {salonlistCreateArgs} args - Arguments to create a Salonlist.
     * @example
     * // Create one Salonlist
     * const Salonlist = await prisma.salonlist.create({
     *   data: {
     *     // ... data to create a Salonlist
     *   }
     * })
     * 
    **/
    create<T extends salonlistCreateArgs>(
      args: SelectSubset<T, salonlistCreateArgs>
    ): CheckSelect<T, Prisma__salonlistClient<salonlist>, Prisma__salonlistClient<salonlistGetPayload<T>>>

    /**
     * Create many Salonlists.
     *     @param {salonlistCreateManyArgs} args - Arguments to create many Salonlists.
     *     @example
     *     // Create many Salonlists
     *     const salonlist = await prisma.salonlist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends salonlistCreateManyArgs>(
      args?: SelectSubset<T, salonlistCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Salonlist.
     * @param {salonlistDeleteArgs} args - Arguments to delete one Salonlist.
     * @example
     * // Delete one Salonlist
     * const Salonlist = await prisma.salonlist.delete({
     *   where: {
     *     // ... filter to delete one Salonlist
     *   }
     * })
     * 
    **/
    delete<T extends salonlistDeleteArgs>(
      args: SelectSubset<T, salonlistDeleteArgs>
    ): CheckSelect<T, Prisma__salonlistClient<salonlist>, Prisma__salonlistClient<salonlistGetPayload<T>>>

    /**
     * Update one Salonlist.
     * @param {salonlistUpdateArgs} args - Arguments to update one Salonlist.
     * @example
     * // Update one Salonlist
     * const salonlist = await prisma.salonlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends salonlistUpdateArgs>(
      args: SelectSubset<T, salonlistUpdateArgs>
    ): CheckSelect<T, Prisma__salonlistClient<salonlist>, Prisma__salonlistClient<salonlistGetPayload<T>>>

    /**
     * Delete zero or more Salonlists.
     * @param {salonlistDeleteManyArgs} args - Arguments to filter Salonlists to delete.
     * @example
     * // Delete a few Salonlists
     * const { count } = await prisma.salonlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends salonlistDeleteManyArgs>(
      args?: SelectSubset<T, salonlistDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Salonlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonlistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Salonlists
     * const salonlist = await prisma.salonlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends salonlistUpdateManyArgs>(
      args: SelectSubset<T, salonlistUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Salonlist.
     * @param {salonlistUpsertArgs} args - Arguments to update or create a Salonlist.
     * @example
     * // Update or create a Salonlist
     * const salonlist = await prisma.salonlist.upsert({
     *   create: {
     *     // ... data to create a Salonlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Salonlist we want to update
     *   }
     * })
    **/
    upsert<T extends salonlistUpsertArgs>(
      args: SelectSubset<T, salonlistUpsertArgs>
    ): CheckSelect<T, Prisma__salonlistClient<salonlist>, Prisma__salonlistClient<salonlistGetPayload<T>>>

    /**
     * Count the number of Salonlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salonlistCountArgs} args - Arguments to filter Salonlists to count.
     * @example
     * // Count the number of Salonlists
     * const count = await prisma.salonlist.count({
     *   where: {
     *     // ... the filter for the Salonlists we want to count
     *   }
     * })
    **/
    count<T extends salonlistCountArgs>(
      args?: Subset<T, salonlistCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalonlistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Salonlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalonlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalonlistAggregateArgs>(args: Subset<T, SalonlistAggregateArgs>): PrismaPromise<GetSalonlistAggregateType<T>>

    /**
     * Group by Salonlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalonlistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalonlistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalonlistGroupByArgs['orderBy'] }
        : { orderBy?: SalonlistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalonlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalonlistGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for salonlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__salonlistClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sale<T extends saleFindManyArgs = {}>(args?: Subset<T, saleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sale>>, PrismaPromise<Array<saleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * salonlist findUnique
   */
  export type salonlistFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the salonlist
     * 
    **/
    select?: salonlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salonlistInclude | null
    /**
     * Throw an Error if a salonlist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which salonlist to fetch.
     * 
    **/
    where: salonlistWhereUniqueInput
  }


  /**
   * salonlist findFirst
   */
  export type salonlistFindFirstArgs = {
    /**
     * Select specific fields to fetch from the salonlist
     * 
    **/
    select?: salonlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salonlistInclude | null
    /**
     * Throw an Error if a salonlist can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which salonlist to fetch.
     * 
    **/
    where?: salonlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salonlists to fetch.
     * 
    **/
    orderBy?: Enumerable<salonlistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for salonlists.
     * 
    **/
    cursor?: salonlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salonlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salonlists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of salonlists.
     * 
    **/
    distinct?: Enumerable<SalonlistScalarFieldEnum>
  }


  /**
   * salonlist findMany
   */
  export type salonlistFindManyArgs = {
    /**
     * Select specific fields to fetch from the salonlist
     * 
    **/
    select?: salonlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salonlistInclude | null
    /**
     * Filter, which salonlists to fetch.
     * 
    **/
    where?: salonlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salonlists to fetch.
     * 
    **/
    orderBy?: Enumerable<salonlistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing salonlists.
     * 
    **/
    cursor?: salonlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salonlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salonlists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SalonlistScalarFieldEnum>
  }


  /**
   * salonlist create
   */
  export type salonlistCreateArgs = {
    /**
     * Select specific fields to fetch from the salonlist
     * 
    **/
    select?: salonlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salonlistInclude | null
    /**
     * The data needed to create a salonlist.
     * 
    **/
    data: XOR<salonlistCreateInput, salonlistUncheckedCreateInput>
  }


  /**
   * salonlist createMany
   */
  export type salonlistCreateManyArgs = {
    data: Enumerable<salonlistCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * salonlist update
   */
  export type salonlistUpdateArgs = {
    /**
     * Select specific fields to fetch from the salonlist
     * 
    **/
    select?: salonlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salonlistInclude | null
    /**
     * The data needed to update a salonlist.
     * 
    **/
    data: XOR<salonlistUpdateInput, salonlistUncheckedUpdateInput>
    /**
     * Choose, which salonlist to update.
     * 
    **/
    where: salonlistWhereUniqueInput
  }


  /**
   * salonlist updateMany
   */
  export type salonlistUpdateManyArgs = {
    data: XOR<salonlistUpdateManyMutationInput, salonlistUncheckedUpdateManyInput>
    where?: salonlistWhereInput
  }


  /**
   * salonlist upsert
   */
  export type salonlistUpsertArgs = {
    /**
     * Select specific fields to fetch from the salonlist
     * 
    **/
    select?: salonlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salonlistInclude | null
    /**
     * The filter to search for the salonlist to update in case it exists.
     * 
    **/
    where: salonlistWhereUniqueInput
    /**
     * In case the salonlist found by the `where` argument doesn't exist, create a new salonlist with this data.
     * 
    **/
    create: XOR<salonlistCreateInput, salonlistUncheckedCreateInput>
    /**
     * In case the salonlist was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<salonlistUpdateInput, salonlistUncheckedUpdateInput>
  }


  /**
   * salonlist delete
   */
  export type salonlistDeleteArgs = {
    /**
     * Select specific fields to fetch from the salonlist
     * 
    **/
    select?: salonlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salonlistInclude | null
    /**
     * Filter which salonlist to delete.
     * 
    **/
    where: salonlistWhereUniqueInput
  }


  /**
   * salonlist deleteMany
   */
  export type salonlistDeleteManyArgs = {
    where?: salonlistWhereInput
  }


  /**
   * salonlist without action
   */
  export type salonlistArgs = {
    /**
     * Select specific fields to fetch from the salonlist
     * 
    **/
    select?: salonlistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salonlistInclude | null
  }



  /**
   * Model sale
   */


  export type AggregateSale = {
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  export type SaleAvgAggregateOutputType = {
    id: number | null
    dress_id: number | null
    salon_id: number | null
    user_id: number | null
  }

  export type SaleSumAggregateOutputType = {
    id: number | null
    dress_id: number | null
    salon_id: number | null
    user_id: number | null
  }

  export type SaleMinAggregateOutputType = {
    id: number | null
    isfifty: boolean | null
    dress_id: number | null
    dress_count: string | null
    main_price: string | null
    dress_note: string | null
    given_price: string | null
    left_price: string | null
    date_left_price: string | null
    sold_by_phone: boolean | null
    salon_id: number | null
    delivery_date: string | null
    need_send: boolean | null
    delivered: boolean | null
    canceled: boolean | null
    girl_name: string | null
    wedding_date: string | null
    ispassport: boolean | null
    salon_given_price: string | null
    date_created: string | null
    user_id: number | null
  }

  export type SaleMaxAggregateOutputType = {
    id: number | null
    isfifty: boolean | null
    dress_id: number | null
    dress_count: string | null
    main_price: string | null
    dress_note: string | null
    given_price: string | null
    left_price: string | null
    date_left_price: string | null
    sold_by_phone: boolean | null
    salon_id: number | null
    delivery_date: string | null
    need_send: boolean | null
    delivered: boolean | null
    canceled: boolean | null
    girl_name: string | null
    wedding_date: string | null
    ispassport: boolean | null
    salon_given_price: string | null
    date_created: string | null
    user_id: number | null
  }

  export type SaleCountAggregateOutputType = {
    id: number
    isfifty: number
    dress_id: number
    dress_count: number
    main_price: number
    dress_note: number
    given_price: number
    left_price: number
    date_left_price: number
    sold_by_phone: number
    salon_id: number
    delivery_date: number
    need_send: number
    delivered: number
    canceled: number
    girl_name: number
    wedding_date: number
    ispassport: number
    salon_given_price: number
    date_created: number
    user_id: number
    _all: number
  }


  export type SaleAvgAggregateInputType = {
    id?: true
    dress_id?: true
    salon_id?: true
    user_id?: true
  }

  export type SaleSumAggregateInputType = {
    id?: true
    dress_id?: true
    salon_id?: true
    user_id?: true
  }

  export type SaleMinAggregateInputType = {
    id?: true
    isfifty?: true
    dress_id?: true
    dress_count?: true
    main_price?: true
    dress_note?: true
    given_price?: true
    left_price?: true
    date_left_price?: true
    sold_by_phone?: true
    salon_id?: true
    delivery_date?: true
    need_send?: true
    delivered?: true
    canceled?: true
    girl_name?: true
    wedding_date?: true
    ispassport?: true
    salon_given_price?: true
    date_created?: true
    user_id?: true
  }

  export type SaleMaxAggregateInputType = {
    id?: true
    isfifty?: true
    dress_id?: true
    dress_count?: true
    main_price?: true
    dress_note?: true
    given_price?: true
    left_price?: true
    date_left_price?: true
    sold_by_phone?: true
    salon_id?: true
    delivery_date?: true
    need_send?: true
    delivered?: true
    canceled?: true
    girl_name?: true
    wedding_date?: true
    ispassport?: true
    salon_given_price?: true
    date_created?: true
    user_id?: true
  }

  export type SaleCountAggregateInputType = {
    id?: true
    isfifty?: true
    dress_id?: true
    dress_count?: true
    main_price?: true
    dress_note?: true
    given_price?: true
    left_price?: true
    date_left_price?: true
    sold_by_phone?: true
    salon_id?: true
    delivery_date?: true
    need_send?: true
    delivered?: true
    canceled?: true
    girl_name?: true
    wedding_date?: true
    ispassport?: true
    salon_given_price?: true
    date_created?: true
    user_id?: true
    _all?: true
  }

  export type SaleAggregateArgs = {
    /**
     * Filter which sale to aggregate.
     * 
    **/
    where?: saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     * 
    **/
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sales
    **/
    _count?: true | SaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleMaxAggregateInputType
  }

  export type GetSaleAggregateType<T extends SaleAggregateArgs> = {
        [P in keyof T & keyof AggregateSale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSale[P]>
      : GetScalarType<T[P], AggregateSale[P]>
  }




  export type SaleGroupByArgs = {
    where?: saleWhereInput
    orderBy?: Enumerable<saleOrderByWithAggregationInput>
    by: Array<SaleScalarFieldEnum>
    having?: saleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleCountAggregateInputType | true
    _avg?: SaleAvgAggregateInputType
    _sum?: SaleSumAggregateInputType
    _min?: SaleMinAggregateInputType
    _max?: SaleMaxAggregateInputType
  }


  export type SaleGroupByOutputType = {
    id: number
    isfifty: boolean | null
    dress_id: number
    dress_count: string | null
    main_price: string | null
    dress_note: string
    given_price: string | null
    left_price: string | null
    date_left_price: string | null
    sold_by_phone: boolean | null
    salon_id: number
    delivery_date: string | null
    need_send: boolean | null
    delivered: boolean | null
    canceled: boolean | null
    girl_name: string | null
    wedding_date: string | null
    ispassport: boolean | null
    salon_given_price: string | null
    date_created: string
    user_id: number
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  type GetSaleGroupByPayload<T extends SaleGroupByArgs> = Promise<
    Array<
      PickArray<SaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleGroupByOutputType[P]>
            : GetScalarType<T[P], SaleGroupByOutputType[P]>
        }
      >
    >


  export type saleSelect = {
    id?: boolean
    isfifty?: boolean
    dress_id?: boolean
    dress_count?: boolean
    main_price?: boolean
    dress_note?: boolean
    given_price?: boolean
    left_price?: boolean
    date_left_price?: boolean
    sold_by_phone?: boolean
    salon_id?: boolean
    delivery_date?: boolean
    need_send?: boolean
    delivered?: boolean
    canceled?: boolean
    girl_name?: boolean
    wedding_date?: boolean
    ispassport?: boolean
    salon_given_price?: boolean
    date_created?: boolean
    user_id?: boolean
    dress?: boolean | dressArgs
    salonlist?: boolean | salonlistArgs
    users?: boolean | usersArgs
  }

  export type saleInclude = {
    dress?: boolean | dressArgs
    salonlist?: boolean | salonlistArgs
    users?: boolean | usersArgs
  }

  export type saleGetPayload<
    S extends boolean | null | undefined | saleArgs,
    U = keyof S
      > = S extends true
        ? sale
    : S extends undefined
    ? never
    : S extends saleArgs | saleFindManyArgs
    ?'include' extends U
    ? sale  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'dress'
        ? dressGetPayload<S['include'][P]> :
        P extends 'salonlist'
        ? salonlistGetPayload<S['include'][P]> :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof sale ?sale [P]
  : 
          P extends 'dress'
        ? dressGetPayload<S['select'][P]> :
        P extends 'salonlist'
        ? salonlistGetPayload<S['select'][P]> :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : sale
  : sale


  type saleCountArgs = Merge<
    Omit<saleFindManyArgs, 'select' | 'include'> & {
      select?: SaleCountAggregateInputType | true
    }
  >

  export interface saleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sale that matches the filter.
     * @param {saleFindUniqueArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends saleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, saleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sale'> extends True ? CheckSelect<T, Prisma__saleClient<sale>, Prisma__saleClient<saleGetPayload<T>>> : CheckSelect<T, Prisma__saleClient<sale | null >, Prisma__saleClient<saleGetPayload<T> | null >>

    /**
     * Find the first Sale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saleFindFirstArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends saleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, saleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sale'> extends True ? CheckSelect<T, Prisma__saleClient<sale>, Prisma__saleClient<saleGetPayload<T>>> : CheckSelect<T, Prisma__saleClient<sale | null >, Prisma__saleClient<saleGetPayload<T> | null >>

    /**
     * Find zero or more Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sales
     * const sales = await prisma.sale.findMany()
     * 
     * // Get first 10 Sales
     * const sales = await prisma.sale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saleWithIdOnly = await prisma.sale.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends saleFindManyArgs>(
      args?: SelectSubset<T, saleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<sale>>, PrismaPromise<Array<saleGetPayload<T>>>>

    /**
     * Create a Sale.
     * @param {saleCreateArgs} args - Arguments to create a Sale.
     * @example
     * // Create one Sale
     * const Sale = await prisma.sale.create({
     *   data: {
     *     // ... data to create a Sale
     *   }
     * })
     * 
    **/
    create<T extends saleCreateArgs>(
      args: SelectSubset<T, saleCreateArgs>
    ): CheckSelect<T, Prisma__saleClient<sale>, Prisma__saleClient<saleGetPayload<T>>>

    /**
     * Create many Sales.
     *     @param {saleCreateManyArgs} args - Arguments to create many Sales.
     *     @example
     *     // Create many Sales
     *     const sale = await prisma.sale.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends saleCreateManyArgs>(
      args?: SelectSubset<T, saleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sale.
     * @param {saleDeleteArgs} args - Arguments to delete one Sale.
     * @example
     * // Delete one Sale
     * const Sale = await prisma.sale.delete({
     *   where: {
     *     // ... filter to delete one Sale
     *   }
     * })
     * 
    **/
    delete<T extends saleDeleteArgs>(
      args: SelectSubset<T, saleDeleteArgs>
    ): CheckSelect<T, Prisma__saleClient<sale>, Prisma__saleClient<saleGetPayload<T>>>

    /**
     * Update one Sale.
     * @param {saleUpdateArgs} args - Arguments to update one Sale.
     * @example
     * // Update one Sale
     * const sale = await prisma.sale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends saleUpdateArgs>(
      args: SelectSubset<T, saleUpdateArgs>
    ): CheckSelect<T, Prisma__saleClient<sale>, Prisma__saleClient<saleGetPayload<T>>>

    /**
     * Delete zero or more Sales.
     * @param {saleDeleteManyArgs} args - Arguments to filter Sales to delete.
     * @example
     * // Delete a few Sales
     * const { count } = await prisma.sale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends saleDeleteManyArgs>(
      args?: SelectSubset<T, saleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sales
     * const sale = await prisma.sale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends saleUpdateManyArgs>(
      args: SelectSubset<T, saleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sale.
     * @param {saleUpsertArgs} args - Arguments to update or create a Sale.
     * @example
     * // Update or create a Sale
     * const sale = await prisma.sale.upsert({
     *   create: {
     *     // ... data to create a Sale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sale we want to update
     *   }
     * })
    **/
    upsert<T extends saleUpsertArgs>(
      args: SelectSubset<T, saleUpsertArgs>
    ): CheckSelect<T, Prisma__saleClient<sale>, Prisma__saleClient<saleGetPayload<T>>>

    /**
     * Count the number of Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {saleCountArgs} args - Arguments to filter Sales to count.
     * @example
     * // Count the number of Sales
     * const count = await prisma.sale.count({
     *   where: {
     *     // ... the filter for the Sales we want to count
     *   }
     * })
    **/
    count<T extends saleCountArgs>(
      args?: Subset<T, saleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleAggregateArgs>(args: Subset<T, SaleAggregateArgs>): PrismaPromise<GetSaleAggregateType<T>>

    /**
     * Group by Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleGroupByArgs['orderBy'] }
        : { orderBy?: SaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for sale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__saleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    dress<T extends dressArgs = {}>(args?: Subset<T, dressArgs>): CheckSelect<T, Prisma__dressClient<dress | null >, Prisma__dressClient<dressGetPayload<T> | null >>;

    salonlist<T extends salonlistArgs = {}>(args?: Subset<T, salonlistArgs>): CheckSelect<T, Prisma__salonlistClient<salonlist | null >, Prisma__salonlistClient<salonlistGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * sale findUnique
   */
  export type saleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the sale
     * 
    **/
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: saleInclude | null
    /**
     * Throw an Error if a sale can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sale to fetch.
     * 
    **/
    where: saleWhereUniqueInput
  }


  /**
   * sale findFirst
   */
  export type saleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the sale
     * 
    **/
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: saleInclude | null
    /**
     * Throw an Error if a sale can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sale to fetch.
     * 
    **/
    where?: saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     * 
    **/
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sales.
     * 
    **/
    cursor?: saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sales.
     * 
    **/
    distinct?: Enumerable<SaleScalarFieldEnum>
  }


  /**
   * sale findMany
   */
  export type saleFindManyArgs = {
    /**
     * Select specific fields to fetch from the sale
     * 
    **/
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: saleInclude | null
    /**
     * Filter, which sales to fetch.
     * 
    **/
    where?: saleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sales to fetch.
     * 
    **/
    orderBy?: Enumerable<saleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sales.
     * 
    **/
    cursor?: saleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sales from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sales.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SaleScalarFieldEnum>
  }


  /**
   * sale create
   */
  export type saleCreateArgs = {
    /**
     * Select specific fields to fetch from the sale
     * 
    **/
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: saleInclude | null
    /**
     * The data needed to create a sale.
     * 
    **/
    data: XOR<saleCreateInput, saleUncheckedCreateInput>
  }


  /**
   * sale createMany
   */
  export type saleCreateManyArgs = {
    data: Enumerable<saleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sale update
   */
  export type saleUpdateArgs = {
    /**
     * Select specific fields to fetch from the sale
     * 
    **/
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: saleInclude | null
    /**
     * The data needed to update a sale.
     * 
    **/
    data: XOR<saleUpdateInput, saleUncheckedUpdateInput>
    /**
     * Choose, which sale to update.
     * 
    **/
    where: saleWhereUniqueInput
  }


  /**
   * sale updateMany
   */
  export type saleUpdateManyArgs = {
    data: XOR<saleUpdateManyMutationInput, saleUncheckedUpdateManyInput>
    where?: saleWhereInput
  }


  /**
   * sale upsert
   */
  export type saleUpsertArgs = {
    /**
     * Select specific fields to fetch from the sale
     * 
    **/
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: saleInclude | null
    /**
     * The filter to search for the sale to update in case it exists.
     * 
    **/
    where: saleWhereUniqueInput
    /**
     * In case the sale found by the `where` argument doesn't exist, create a new sale with this data.
     * 
    **/
    create: XOR<saleCreateInput, saleUncheckedCreateInput>
    /**
     * In case the sale was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<saleUpdateInput, saleUncheckedUpdateInput>
  }


  /**
   * sale delete
   */
  export type saleDeleteArgs = {
    /**
     * Select specific fields to fetch from the sale
     * 
    **/
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: saleInclude | null
    /**
     * Filter which sale to delete.
     * 
    **/
    where: saleWhereUniqueInput
  }


  /**
   * sale deleteMany
   */
  export type saleDeleteManyArgs = {
    where?: saleWhereInput
  }


  /**
   * sale without action
   */
  export type saleArgs = {
    /**
     * Select specific fields to fetch from the sale
     * 
    **/
    select?: saleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: saleInclude | null
  }



  /**
   * Model magazins
   */


  export type AggregateMagazins = {
    _count: MagazinsCountAggregateOutputType | null
    _avg: MagazinsAvgAggregateOutputType | null
    _sum: MagazinsSumAggregateOutputType | null
    _min: MagazinsMinAggregateOutputType | null
    _max: MagazinsMaxAggregateOutputType | null
  }

  export type MagazinsAvgAggregateOutputType = {
    id: number | null
  }

  export type MagazinsSumAggregateOutputType = {
    id: number | null
  }

  export type MagazinsMinAggregateOutputType = {
    id: number | null
    name: string | null
    img: string | null
    money: string | null
    saled_dresses: string | null
    left_money: string | null
    address: string | null
    date_created: string | null
  }

  export type MagazinsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    img: string | null
    money: string | null
    saled_dresses: string | null
    left_money: string | null
    address: string | null
    date_created: string | null
  }

  export type MagazinsCountAggregateOutputType = {
    id: number
    name: number
    img: number
    money: number
    saled_dresses: number
    left_money: number
    address: number
    date_created: number
    _all: number
  }


  export type MagazinsAvgAggregateInputType = {
    id?: true
  }

  export type MagazinsSumAggregateInputType = {
    id?: true
  }

  export type MagazinsMinAggregateInputType = {
    id?: true
    name?: true
    img?: true
    money?: true
    saled_dresses?: true
    left_money?: true
    address?: true
    date_created?: true
  }

  export type MagazinsMaxAggregateInputType = {
    id?: true
    name?: true
    img?: true
    money?: true
    saled_dresses?: true
    left_money?: true
    address?: true
    date_created?: true
  }

  export type MagazinsCountAggregateInputType = {
    id?: true
    name?: true
    img?: true
    money?: true
    saled_dresses?: true
    left_money?: true
    address?: true
    date_created?: true
    _all?: true
  }

  export type MagazinsAggregateArgs = {
    /**
     * Filter which magazins to aggregate.
     * 
    **/
    where?: magazinsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of magazins to fetch.
     * 
    **/
    orderBy?: Enumerable<magazinsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: magazinsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` magazins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` magazins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned magazins
    **/
    _count?: true | MagazinsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MagazinsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MagazinsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MagazinsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MagazinsMaxAggregateInputType
  }

  export type GetMagazinsAggregateType<T extends MagazinsAggregateArgs> = {
        [P in keyof T & keyof AggregateMagazins]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMagazins[P]>
      : GetScalarType<T[P], AggregateMagazins[P]>
  }




  export type MagazinsGroupByArgs = {
    where?: magazinsWhereInput
    orderBy?: Enumerable<magazinsOrderByWithAggregationInput>
    by: Array<MagazinsScalarFieldEnum>
    having?: magazinsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MagazinsCountAggregateInputType | true
    _avg?: MagazinsAvgAggregateInputType
    _sum?: MagazinsSumAggregateInputType
    _min?: MagazinsMinAggregateInputType
    _max?: MagazinsMaxAggregateInputType
  }


  export type MagazinsGroupByOutputType = {
    id: number
    name: string
    img: string | null
    money: string | null
    saled_dresses: string | null
    left_money: string | null
    address: string | null
    date_created: string
    _count: MagazinsCountAggregateOutputType | null
    _avg: MagazinsAvgAggregateOutputType | null
    _sum: MagazinsSumAggregateOutputType | null
    _min: MagazinsMinAggregateOutputType | null
    _max: MagazinsMaxAggregateOutputType | null
  }

  type GetMagazinsGroupByPayload<T extends MagazinsGroupByArgs> = Promise<
    Array<
      PickArray<MagazinsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MagazinsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MagazinsGroupByOutputType[P]>
            : GetScalarType<T[P], MagazinsGroupByOutputType[P]>
        }
      >
    >


  export type magazinsSelect = {
    id?: boolean
    name?: boolean
    img?: boolean
    money?: boolean
    saled_dresses?: boolean
    left_money?: boolean
    address?: boolean
    date_created?: boolean
    users?: boolean | usersFindManyArgs
    _count?: boolean | MagazinsCountOutputTypeArgs
  }

  export type magazinsInclude = {
    users?: boolean | usersFindManyArgs
    _count?: boolean | MagazinsCountOutputTypeArgs
  }

  export type magazinsGetPayload<
    S extends boolean | null | undefined | magazinsArgs,
    U = keyof S
      > = S extends true
        ? magazins
    : S extends undefined
    ? never
    : S extends magazinsArgs | magazinsFindManyArgs
    ?'include' extends U
    ? magazins  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? Array < usersGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? MagazinsCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof magazins ?magazins [P]
  : 
          P extends 'users'
        ? Array < usersGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? MagazinsCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : magazins
  : magazins


  type magazinsCountArgs = Merge<
    Omit<magazinsFindManyArgs, 'select' | 'include'> & {
      select?: MagazinsCountAggregateInputType | true
    }
  >

  export interface magazinsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Magazins that matches the filter.
     * @param {magazinsFindUniqueArgs} args - Arguments to find a Magazins
     * @example
     * // Get one Magazins
     * const magazins = await prisma.magazins.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends magazinsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, magazinsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'magazins'> extends True ? CheckSelect<T, Prisma__magazinsClient<magazins>, Prisma__magazinsClient<magazinsGetPayload<T>>> : CheckSelect<T, Prisma__magazinsClient<magazins | null >, Prisma__magazinsClient<magazinsGetPayload<T> | null >>

    /**
     * Find the first Magazins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {magazinsFindFirstArgs} args - Arguments to find a Magazins
     * @example
     * // Get one Magazins
     * const magazins = await prisma.magazins.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends magazinsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, magazinsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'magazins'> extends True ? CheckSelect<T, Prisma__magazinsClient<magazins>, Prisma__magazinsClient<magazinsGetPayload<T>>> : CheckSelect<T, Prisma__magazinsClient<magazins | null >, Prisma__magazinsClient<magazinsGetPayload<T> | null >>

    /**
     * Find zero or more Magazins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {magazinsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Magazins
     * const magazins = await prisma.magazins.findMany()
     * 
     * // Get first 10 Magazins
     * const magazins = await prisma.magazins.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const magazinsWithIdOnly = await prisma.magazins.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends magazinsFindManyArgs>(
      args?: SelectSubset<T, magazinsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<magazins>>, PrismaPromise<Array<magazinsGetPayload<T>>>>

    /**
     * Create a Magazins.
     * @param {magazinsCreateArgs} args - Arguments to create a Magazins.
     * @example
     * // Create one Magazins
     * const Magazins = await prisma.magazins.create({
     *   data: {
     *     // ... data to create a Magazins
     *   }
     * })
     * 
    **/
    create<T extends magazinsCreateArgs>(
      args: SelectSubset<T, magazinsCreateArgs>
    ): CheckSelect<T, Prisma__magazinsClient<magazins>, Prisma__magazinsClient<magazinsGetPayload<T>>>

    /**
     * Create many Magazins.
     *     @param {magazinsCreateManyArgs} args - Arguments to create many Magazins.
     *     @example
     *     // Create many Magazins
     *     const magazins = await prisma.magazins.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends magazinsCreateManyArgs>(
      args?: SelectSubset<T, magazinsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Magazins.
     * @param {magazinsDeleteArgs} args - Arguments to delete one Magazins.
     * @example
     * // Delete one Magazins
     * const Magazins = await prisma.magazins.delete({
     *   where: {
     *     // ... filter to delete one Magazins
     *   }
     * })
     * 
    **/
    delete<T extends magazinsDeleteArgs>(
      args: SelectSubset<T, magazinsDeleteArgs>
    ): CheckSelect<T, Prisma__magazinsClient<magazins>, Prisma__magazinsClient<magazinsGetPayload<T>>>

    /**
     * Update one Magazins.
     * @param {magazinsUpdateArgs} args - Arguments to update one Magazins.
     * @example
     * // Update one Magazins
     * const magazins = await prisma.magazins.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends magazinsUpdateArgs>(
      args: SelectSubset<T, magazinsUpdateArgs>
    ): CheckSelect<T, Prisma__magazinsClient<magazins>, Prisma__magazinsClient<magazinsGetPayload<T>>>

    /**
     * Delete zero or more Magazins.
     * @param {magazinsDeleteManyArgs} args - Arguments to filter Magazins to delete.
     * @example
     * // Delete a few Magazins
     * const { count } = await prisma.magazins.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends magazinsDeleteManyArgs>(
      args?: SelectSubset<T, magazinsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Magazins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {magazinsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Magazins
     * const magazins = await prisma.magazins.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends magazinsUpdateManyArgs>(
      args: SelectSubset<T, magazinsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Magazins.
     * @param {magazinsUpsertArgs} args - Arguments to update or create a Magazins.
     * @example
     * // Update or create a Magazins
     * const magazins = await prisma.magazins.upsert({
     *   create: {
     *     // ... data to create a Magazins
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Magazins we want to update
     *   }
     * })
    **/
    upsert<T extends magazinsUpsertArgs>(
      args: SelectSubset<T, magazinsUpsertArgs>
    ): CheckSelect<T, Prisma__magazinsClient<magazins>, Prisma__magazinsClient<magazinsGetPayload<T>>>

    /**
     * Count the number of Magazins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {magazinsCountArgs} args - Arguments to filter Magazins to count.
     * @example
     * // Count the number of Magazins
     * const count = await prisma.magazins.count({
     *   where: {
     *     // ... the filter for the Magazins we want to count
     *   }
     * })
    **/
    count<T extends magazinsCountArgs>(
      args?: Subset<T, magazinsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MagazinsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Magazins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagazinsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MagazinsAggregateArgs>(args: Subset<T, MagazinsAggregateArgs>): PrismaPromise<GetMagazinsAggregateType<T>>

    /**
     * Group by Magazins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagazinsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MagazinsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MagazinsGroupByArgs['orderBy'] }
        : { orderBy?: MagazinsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MagazinsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMagazinsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for magazins.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__magazinsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersFindManyArgs = {}>(args?: Subset<T, usersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * magazins findUnique
   */
  export type magazinsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the magazins
     * 
    **/
    select?: magazinsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: magazinsInclude | null
    /**
     * Throw an Error if a magazins can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which magazins to fetch.
     * 
    **/
    where: magazinsWhereUniqueInput
  }


  /**
   * magazins findFirst
   */
  export type magazinsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the magazins
     * 
    **/
    select?: magazinsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: magazinsInclude | null
    /**
     * Throw an Error if a magazins can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which magazins to fetch.
     * 
    **/
    where?: magazinsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of magazins to fetch.
     * 
    **/
    orderBy?: Enumerable<magazinsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for magazins.
     * 
    **/
    cursor?: magazinsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` magazins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` magazins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of magazins.
     * 
    **/
    distinct?: Enumerable<MagazinsScalarFieldEnum>
  }


  /**
   * magazins findMany
   */
  export type magazinsFindManyArgs = {
    /**
     * Select specific fields to fetch from the magazins
     * 
    **/
    select?: magazinsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: magazinsInclude | null
    /**
     * Filter, which magazins to fetch.
     * 
    **/
    where?: magazinsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of magazins to fetch.
     * 
    **/
    orderBy?: Enumerable<magazinsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing magazins.
     * 
    **/
    cursor?: magazinsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` magazins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` magazins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MagazinsScalarFieldEnum>
  }


  /**
   * magazins create
   */
  export type magazinsCreateArgs = {
    /**
     * Select specific fields to fetch from the magazins
     * 
    **/
    select?: magazinsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: magazinsInclude | null
    /**
     * The data needed to create a magazins.
     * 
    **/
    data: XOR<magazinsCreateInput, magazinsUncheckedCreateInput>
  }


  /**
   * magazins createMany
   */
  export type magazinsCreateManyArgs = {
    data: Enumerable<magazinsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * magazins update
   */
  export type magazinsUpdateArgs = {
    /**
     * Select specific fields to fetch from the magazins
     * 
    **/
    select?: magazinsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: magazinsInclude | null
    /**
     * The data needed to update a magazins.
     * 
    **/
    data: XOR<magazinsUpdateInput, magazinsUncheckedUpdateInput>
    /**
     * Choose, which magazins to update.
     * 
    **/
    where: magazinsWhereUniqueInput
  }


  /**
   * magazins updateMany
   */
  export type magazinsUpdateManyArgs = {
    data: XOR<magazinsUpdateManyMutationInput, magazinsUncheckedUpdateManyInput>
    where?: magazinsWhereInput
  }


  /**
   * magazins upsert
   */
  export type magazinsUpsertArgs = {
    /**
     * Select specific fields to fetch from the magazins
     * 
    **/
    select?: magazinsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: magazinsInclude | null
    /**
     * The filter to search for the magazins to update in case it exists.
     * 
    **/
    where: magazinsWhereUniqueInput
    /**
     * In case the magazins found by the `where` argument doesn't exist, create a new magazins with this data.
     * 
    **/
    create: XOR<magazinsCreateInput, magazinsUncheckedCreateInput>
    /**
     * In case the magazins was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<magazinsUpdateInput, magazinsUncheckedUpdateInput>
  }


  /**
   * magazins delete
   */
  export type magazinsDeleteArgs = {
    /**
     * Select specific fields to fetch from the magazins
     * 
    **/
    select?: magazinsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: magazinsInclude | null
    /**
     * Filter which magazins to delete.
     * 
    **/
    where: magazinsWhereUniqueInput
  }


  /**
   * magazins deleteMany
   */
  export type magazinsDeleteManyArgs = {
    where?: magazinsWhereInput
  }


  /**
   * magazins without action
   */
  export type magazinsArgs = {
    /**
     * Select specific fields to fetch from the magazins
     * 
    **/
    select?: magazinsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: magazinsInclude | null
  }



  /**
   * Model product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    date_created: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    date_created: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    count: string | null
    amount: string | null
    img: string | null
    date_created: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    count: string | null
    amount: string | null
    img: string | null
    date_created: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    count: number
    amount: number
    img: number
    date_created: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    date_created?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    date_created?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    count?: true
    amount?: true
    img?: true
    date_created?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    count?: true
    amount?: true
    img?: true
    date_created?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    count?: true
    amount?: true
    img?: true
    date_created?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which product to aggregate.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithAggregationInput>
    by: Array<ProductScalarFieldEnum>
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: number
    name: string
    count: string | null
    amount: string
    img: string | null
    date_created: number
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Promise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect = {
    id?: boolean
    name?: boolean
    count?: boolean
    amount?: boolean
    img?: boolean
    date_created?: boolean
    warehouse?: boolean | warehouseFindManyArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type productInclude = {
    warehouse?: boolean | warehouseFindManyArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type productGetPayload<
    S extends boolean | null | undefined | productArgs,
    U = keyof S
      > = S extends true
        ? product
    : S extends undefined
    ? never
    : S extends productArgs | productFindManyArgs
    ?'include' extends U
    ? product  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'warehouse'
        ? Array < warehouseGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? ProductCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof product ?product [P]
  : 
          P extends 'warehouse'
        ? Array < warehouseGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? ProductCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : product
  : product


  type productCountArgs = Merge<
    Omit<productFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface productDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product'> extends True ? CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>> : CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product'> extends True ? CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>> : CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productFindManyArgs>(
      args?: SelectSubset<T, productFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<product>>, PrismaPromise<Array<productGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends productCreateArgs>(
      args: SelectSubset<T, productCreateArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {productCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productCreateManyArgs>(
      args?: SelectSubset<T, productCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends productDeleteArgs>(
      args: SelectSubset<T, productDeleteArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productUpdateArgs>(
      args: SelectSubset<T, productUpdateArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productDeleteManyArgs>(
      args?: SelectSubset<T, productDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productUpdateManyArgs>(
      args: SelectSubset<T, productUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends productUpsertArgs>(
      args: SelectSubset<T, productUpsertArgs>
    ): CheckSelect<T, Prisma__productClient<product>, Prisma__productClient<productGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    warehouse<T extends warehouseFindManyArgs = {}>(args?: Subset<T, warehouseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<warehouse>>, PrismaPromise<Array<warehouseGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * product findUnique
   */
  export type productFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Throw an Error if a product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product to fetch.
     * 
    **/
    where: productWhereUniqueInput
  }


  /**
   * product findFirst
   */
  export type productFindFirstArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Throw an Error if a product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which product to fetch.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product findMany
   */
  export type productFindManyArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter, which products to fetch.
     * 
    **/
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     * 
    **/
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     * 
    **/
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product create
   */
  export type productCreateArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * The data needed to create a product.
     * 
    **/
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }


  /**
   * product createMany
   */
  export type productCreateManyArgs = {
    data: Enumerable<productCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product update
   */
  export type productUpdateArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * The data needed to update a product.
     * 
    **/
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     * 
    **/
    where: productWhereUniqueInput
  }


  /**
   * product updateMany
   */
  export type productUpdateManyArgs = {
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    where?: productWhereInput
  }


  /**
   * product upsert
   */
  export type productUpsertArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * The filter to search for the product to update in case it exists.
     * 
    **/
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     * 
    **/
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }


  /**
   * product delete
   */
  export type productDeleteArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
    /**
     * Filter which product to delete.
     * 
    **/
    where: productWhereUniqueInput
  }


  /**
   * product deleteMany
   */
  export type productDeleteManyArgs = {
    where?: productWhereInput
  }


  /**
   * product without action
   */
  export type productArgs = {
    /**
     * Select specific fields to fetch from the product
     * 
    **/
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: productInclude | null
  }



  /**
   * Model warehouse
   */


  export type AggregateWarehouse = {
    _count: WarehouseCountAggregateOutputType | null
    _avg: WarehouseAvgAggregateOutputType | null
    _sum: WarehouseSumAggregateOutputType | null
    _min: WarehouseMinAggregateOutputType | null
    _max: WarehouseMaxAggregateOutputType | null
  }

  export type WarehouseAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    count: number | null
    price: number | null
    date_created: number | null
  }

  export type WarehouseSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    count: number | null
    price: number | null
    date_created: number | null
  }

  export type WarehouseMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    count: number | null
    price: number | null
    note: string | null
    isused: boolean | null
    date_created: number | null
  }

  export type WarehouseMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    count: number | null
    price: number | null
    note: string | null
    isused: boolean | null
    date_created: number | null
  }

  export type WarehouseCountAggregateOutputType = {
    id: number
    product_id: number
    count: number
    price: number
    note: number
    isused: number
    date_created: number
    _all: number
  }


  export type WarehouseAvgAggregateInputType = {
    id?: true
    product_id?: true
    count?: true
    price?: true
    date_created?: true
  }

  export type WarehouseSumAggregateInputType = {
    id?: true
    product_id?: true
    count?: true
    price?: true
    date_created?: true
  }

  export type WarehouseMinAggregateInputType = {
    id?: true
    product_id?: true
    count?: true
    price?: true
    note?: true
    isused?: true
    date_created?: true
  }

  export type WarehouseMaxAggregateInputType = {
    id?: true
    product_id?: true
    count?: true
    price?: true
    note?: true
    isused?: true
    date_created?: true
  }

  export type WarehouseCountAggregateInputType = {
    id?: true
    product_id?: true
    count?: true
    price?: true
    note?: true
    isused?: true
    date_created?: true
    _all?: true
  }

  export type WarehouseAggregateArgs = {
    /**
     * Filter which warehouse to aggregate.
     * 
    **/
    where?: warehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of warehouses to fetch.
     * 
    **/
    orderBy?: Enumerable<warehouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: warehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` warehouses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` warehouses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned warehouses
    **/
    _count?: true | WarehouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WarehouseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WarehouseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WarehouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WarehouseMaxAggregateInputType
  }

  export type GetWarehouseAggregateType<T extends WarehouseAggregateArgs> = {
        [P in keyof T & keyof AggregateWarehouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWarehouse[P]>
      : GetScalarType<T[P], AggregateWarehouse[P]>
  }




  export type WarehouseGroupByArgs = {
    where?: warehouseWhereInput
    orderBy?: Enumerable<warehouseOrderByWithAggregationInput>
    by: Array<WarehouseScalarFieldEnum>
    having?: warehouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WarehouseCountAggregateInputType | true
    _avg?: WarehouseAvgAggregateInputType
    _sum?: WarehouseSumAggregateInputType
    _min?: WarehouseMinAggregateInputType
    _max?: WarehouseMaxAggregateInputType
  }


  export type WarehouseGroupByOutputType = {
    id: number
    product_id: number
    count: number
    price: number | null
    note: string
    isused: boolean | null
    date_created: number
    _count: WarehouseCountAggregateOutputType | null
    _avg: WarehouseAvgAggregateOutputType | null
    _sum: WarehouseSumAggregateOutputType | null
    _min: WarehouseMinAggregateOutputType | null
    _max: WarehouseMaxAggregateOutputType | null
  }

  type GetWarehouseGroupByPayload<T extends WarehouseGroupByArgs> = Promise<
    Array<
      PickArray<WarehouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WarehouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WarehouseGroupByOutputType[P]>
            : GetScalarType<T[P], WarehouseGroupByOutputType[P]>
        }
      >
    >


  export type warehouseSelect = {
    id?: boolean
    product_id?: boolean
    count?: boolean
    price?: boolean
    note?: boolean
    isused?: boolean
    date_created?: boolean
    product?: boolean | productArgs
  }

  export type warehouseInclude = {
    product?: boolean | productArgs
  }

  export type warehouseGetPayload<
    S extends boolean | null | undefined | warehouseArgs,
    U = keyof S
      > = S extends true
        ? warehouse
    : S extends undefined
    ? never
    : S extends warehouseArgs | warehouseFindManyArgs
    ?'include' extends U
    ? warehouse  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'product'
        ? productGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof warehouse ?warehouse [P]
  : 
          P extends 'product'
        ? productGetPayload<S['select'][P]> : never
  } 
    : warehouse
  : warehouse


  type warehouseCountArgs = Merge<
    Omit<warehouseFindManyArgs, 'select' | 'include'> & {
      select?: WarehouseCountAggregateInputType | true
    }
  >

  export interface warehouseDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Warehouse that matches the filter.
     * @param {warehouseFindUniqueArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends warehouseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, warehouseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'warehouse'> extends True ? CheckSelect<T, Prisma__warehouseClient<warehouse>, Prisma__warehouseClient<warehouseGetPayload<T>>> : CheckSelect<T, Prisma__warehouseClient<warehouse | null >, Prisma__warehouseClient<warehouseGetPayload<T> | null >>

    /**
     * Find the first Warehouse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {warehouseFindFirstArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends warehouseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, warehouseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'warehouse'> extends True ? CheckSelect<T, Prisma__warehouseClient<warehouse>, Prisma__warehouseClient<warehouseGetPayload<T>>> : CheckSelect<T, Prisma__warehouseClient<warehouse | null >, Prisma__warehouseClient<warehouseGetPayload<T> | null >>

    /**
     * Find zero or more Warehouses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {warehouseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Warehouses
     * const warehouses = await prisma.warehouse.findMany()
     * 
     * // Get first 10 Warehouses
     * const warehouses = await prisma.warehouse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const warehouseWithIdOnly = await prisma.warehouse.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends warehouseFindManyArgs>(
      args?: SelectSubset<T, warehouseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<warehouse>>, PrismaPromise<Array<warehouseGetPayload<T>>>>

    /**
     * Create a Warehouse.
     * @param {warehouseCreateArgs} args - Arguments to create a Warehouse.
     * @example
     * // Create one Warehouse
     * const Warehouse = await prisma.warehouse.create({
     *   data: {
     *     // ... data to create a Warehouse
     *   }
     * })
     * 
    **/
    create<T extends warehouseCreateArgs>(
      args: SelectSubset<T, warehouseCreateArgs>
    ): CheckSelect<T, Prisma__warehouseClient<warehouse>, Prisma__warehouseClient<warehouseGetPayload<T>>>

    /**
     * Create many Warehouses.
     *     @param {warehouseCreateManyArgs} args - Arguments to create many Warehouses.
     *     @example
     *     // Create many Warehouses
     *     const warehouse = await prisma.warehouse.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends warehouseCreateManyArgs>(
      args?: SelectSubset<T, warehouseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Warehouse.
     * @param {warehouseDeleteArgs} args - Arguments to delete one Warehouse.
     * @example
     * // Delete one Warehouse
     * const Warehouse = await prisma.warehouse.delete({
     *   where: {
     *     // ... filter to delete one Warehouse
     *   }
     * })
     * 
    **/
    delete<T extends warehouseDeleteArgs>(
      args: SelectSubset<T, warehouseDeleteArgs>
    ): CheckSelect<T, Prisma__warehouseClient<warehouse>, Prisma__warehouseClient<warehouseGetPayload<T>>>

    /**
     * Update one Warehouse.
     * @param {warehouseUpdateArgs} args - Arguments to update one Warehouse.
     * @example
     * // Update one Warehouse
     * const warehouse = await prisma.warehouse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends warehouseUpdateArgs>(
      args: SelectSubset<T, warehouseUpdateArgs>
    ): CheckSelect<T, Prisma__warehouseClient<warehouse>, Prisma__warehouseClient<warehouseGetPayload<T>>>

    /**
     * Delete zero or more Warehouses.
     * @param {warehouseDeleteManyArgs} args - Arguments to filter Warehouses to delete.
     * @example
     * // Delete a few Warehouses
     * const { count } = await prisma.warehouse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends warehouseDeleteManyArgs>(
      args?: SelectSubset<T, warehouseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {warehouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Warehouses
     * const warehouse = await prisma.warehouse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends warehouseUpdateManyArgs>(
      args: SelectSubset<T, warehouseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Warehouse.
     * @param {warehouseUpsertArgs} args - Arguments to update or create a Warehouse.
     * @example
     * // Update or create a Warehouse
     * const warehouse = await prisma.warehouse.upsert({
     *   create: {
     *     // ... data to create a Warehouse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Warehouse we want to update
     *   }
     * })
    **/
    upsert<T extends warehouseUpsertArgs>(
      args: SelectSubset<T, warehouseUpsertArgs>
    ): CheckSelect<T, Prisma__warehouseClient<warehouse>, Prisma__warehouseClient<warehouseGetPayload<T>>>

    /**
     * Count the number of Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {warehouseCountArgs} args - Arguments to filter Warehouses to count.
     * @example
     * // Count the number of Warehouses
     * const count = await prisma.warehouse.count({
     *   where: {
     *     // ... the filter for the Warehouses we want to count
     *   }
     * })
    **/
    count<T extends warehouseCountArgs>(
      args?: Subset<T, warehouseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WarehouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Warehouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WarehouseAggregateArgs>(args: Subset<T, WarehouseAggregateArgs>): PrismaPromise<GetWarehouseAggregateType<T>>

    /**
     * Group by Warehouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WarehouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WarehouseGroupByArgs['orderBy'] }
        : { orderBy?: WarehouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WarehouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarehouseGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for warehouse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__warehouseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends productArgs = {}>(args?: Subset<T, productArgs>): CheckSelect<T, Prisma__productClient<product | null >, Prisma__productClient<productGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * warehouse findUnique
   */
  export type warehouseFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the warehouse
     * 
    **/
    select?: warehouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: warehouseInclude | null
    /**
     * Throw an Error if a warehouse can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which warehouse to fetch.
     * 
    **/
    where: warehouseWhereUniqueInput
  }


  /**
   * warehouse findFirst
   */
  export type warehouseFindFirstArgs = {
    /**
     * Select specific fields to fetch from the warehouse
     * 
    **/
    select?: warehouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: warehouseInclude | null
    /**
     * Throw an Error if a warehouse can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which warehouse to fetch.
     * 
    **/
    where?: warehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of warehouses to fetch.
     * 
    **/
    orderBy?: Enumerable<warehouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for warehouses.
     * 
    **/
    cursor?: warehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` warehouses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` warehouses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of warehouses.
     * 
    **/
    distinct?: Enumerable<WarehouseScalarFieldEnum>
  }


  /**
   * warehouse findMany
   */
  export type warehouseFindManyArgs = {
    /**
     * Select specific fields to fetch from the warehouse
     * 
    **/
    select?: warehouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: warehouseInclude | null
    /**
     * Filter, which warehouses to fetch.
     * 
    **/
    where?: warehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of warehouses to fetch.
     * 
    **/
    orderBy?: Enumerable<warehouseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing warehouses.
     * 
    **/
    cursor?: warehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` warehouses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` warehouses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WarehouseScalarFieldEnum>
  }


  /**
   * warehouse create
   */
  export type warehouseCreateArgs = {
    /**
     * Select specific fields to fetch from the warehouse
     * 
    **/
    select?: warehouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: warehouseInclude | null
    /**
     * The data needed to create a warehouse.
     * 
    **/
    data: XOR<warehouseCreateInput, warehouseUncheckedCreateInput>
  }


  /**
   * warehouse createMany
   */
  export type warehouseCreateManyArgs = {
    data: Enumerable<warehouseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * warehouse update
   */
  export type warehouseUpdateArgs = {
    /**
     * Select specific fields to fetch from the warehouse
     * 
    **/
    select?: warehouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: warehouseInclude | null
    /**
     * The data needed to update a warehouse.
     * 
    **/
    data: XOR<warehouseUpdateInput, warehouseUncheckedUpdateInput>
    /**
     * Choose, which warehouse to update.
     * 
    **/
    where: warehouseWhereUniqueInput
  }


  /**
   * warehouse updateMany
   */
  export type warehouseUpdateManyArgs = {
    data: XOR<warehouseUpdateManyMutationInput, warehouseUncheckedUpdateManyInput>
    where?: warehouseWhereInput
  }


  /**
   * warehouse upsert
   */
  export type warehouseUpsertArgs = {
    /**
     * Select specific fields to fetch from the warehouse
     * 
    **/
    select?: warehouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: warehouseInclude | null
    /**
     * The filter to search for the warehouse to update in case it exists.
     * 
    **/
    where: warehouseWhereUniqueInput
    /**
     * In case the warehouse found by the `where` argument doesn't exist, create a new warehouse with this data.
     * 
    **/
    create: XOR<warehouseCreateInput, warehouseUncheckedCreateInput>
    /**
     * In case the warehouse was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<warehouseUpdateInput, warehouseUncheckedUpdateInput>
  }


  /**
   * warehouse delete
   */
  export type warehouseDeleteArgs = {
    /**
     * Select specific fields to fetch from the warehouse
     * 
    **/
    select?: warehouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: warehouseInclude | null
    /**
     * Filter which warehouse to delete.
     * 
    **/
    where: warehouseWhereUniqueInput
  }


  /**
   * warehouse deleteMany
   */
  export type warehouseDeleteManyArgs = {
    where?: warehouseWhereInput
  }


  /**
   * warehouse without action
   */
  export type warehouseArgs = {
    /**
     * Select specific fields to fetch from the warehouse
     * 
    **/
    select?: warehouseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: warehouseInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const RolesScalarFieldEnum: {
    id: 'id',
    role: 'role'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    phone: 'phone',
    born_date: 'born_date',
    user_picture: 'user_picture',
    role_id: 'role_id',
    magazine_id: 'magazine_id',
    date_created: 'date_created'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const BalanceScalarFieldEnum: {
    id: 'id',
    balance: 'balance',
    left_balance: 'left_balance',
    date_created_updated: 'date_created_updated'
  };

  export type BalanceScalarFieldEnum = (typeof BalanceScalarFieldEnum)[keyof typeof BalanceScalarFieldEnum]


  export const Balance_historyScalarFieldEnum: {
    id: 'id',
    add_balance: 'add_balance',
    get_balance: 'get_balance',
    note: 'note',
    report: 'report',
    date_created: 'date_created'
  };

  export type Balance_historyScalarFieldEnum = (typeof Balance_historyScalarFieldEnum)[keyof typeof Balance_historyScalarFieldEnum]


  export const CostsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    number: 'number',
    amount: 'amount',
    price: 'price',
    note: 'note',
    is_serio: 'is_serio',
    date_created: 'date_created'
  };

  export type CostsScalarFieldEnum = (typeof CostsScalarFieldEnum)[keyof typeof CostsScalarFieldEnum]


  export const DressScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    img: 'img',
    date_created: 'date_created',
    user_id: 'user_id'
  };

  export type DressScalarFieldEnum = (typeof DressScalarFieldEnum)[keyof typeof DressScalarFieldEnum]


  export const SalonlistScalarFieldEnum: {
    id: 'id',
    salonchi_name: 'salonchi_name',
    salon_name: 'salon_name',
    address: 'address',
    phone: 'phone',
    date_created: 'date_created',
    user_id: 'user_id'
  };

  export type SalonlistScalarFieldEnum = (typeof SalonlistScalarFieldEnum)[keyof typeof SalonlistScalarFieldEnum]


  export const SaleScalarFieldEnum: {
    id: 'id',
    isfifty: 'isfifty',
    dress_id: 'dress_id',
    dress_count: 'dress_count',
    main_price: 'main_price',
    dress_note: 'dress_note',
    given_price: 'given_price',
    left_price: 'left_price',
    date_left_price: 'date_left_price',
    sold_by_phone: 'sold_by_phone',
    salon_id: 'salon_id',
    delivery_date: 'delivery_date',
    need_send: 'need_send',
    delivered: 'delivered',
    canceled: 'canceled',
    girl_name: 'girl_name',
    wedding_date: 'wedding_date',
    ispassport: 'ispassport',
    salon_given_price: 'salon_given_price',
    date_created: 'date_created',
    user_id: 'user_id'
  };

  export type SaleScalarFieldEnum = (typeof SaleScalarFieldEnum)[keyof typeof SaleScalarFieldEnum]


  export const MagazinsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    img: 'img',
    money: 'money',
    saled_dresses: 'saled_dresses',
    left_money: 'left_money',
    address: 'address',
    date_created: 'date_created'
  };

  export type MagazinsScalarFieldEnum = (typeof MagazinsScalarFieldEnum)[keyof typeof MagazinsScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    count: 'count',
    amount: 'amount',
    img: 'img',
    date_created: 'date_created'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const WarehouseScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    count: 'count',
    price: 'price',
    note: 'note',
    isused: 'isused',
    date_created: 'date_created'
  };

  export type WarehouseScalarFieldEnum = (typeof WarehouseScalarFieldEnum)[keyof typeof WarehouseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type rolesWhereInput = {
    AND?: Enumerable<rolesWhereInput>
    OR?: Enumerable<rolesWhereInput>
    NOT?: Enumerable<rolesWhereInput>
    id?: IntFilter | number
    role?: StringFilter | string
    users?: UsersListRelationFilter
  }

  export type rolesOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    users?: usersOrderByRelationAggregateInput
  }

  export type rolesWhereUniqueInput = {
    id?: number
    role?: string
  }

  export type rolesOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    _count?: rolesCountOrderByAggregateInput
    _avg?: rolesAvgOrderByAggregateInput
    _max?: rolesMaxOrderByAggregateInput
    _min?: rolesMinOrderByAggregateInput
    _sum?: rolesSumOrderByAggregateInput
  }

  export type rolesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<rolesScalarWhereWithAggregatesInput>
    OR?: Enumerable<rolesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<rolesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    role?: StringWithAggregatesFilter | string
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    phone?: StringFilter | string
    born_date?: StringNullableFilter | string | null
    user_picture?: StringNullableFilter | string | null
    role_id?: IntFilter | number
    magazine_id?: IntNullableFilter | number | null
    date_created?: StringFilter | string
    magazins?: XOR<MagazinsRelationFilter, magazinsWhereInput> | null
    roles?: XOR<RolesRelationFilter, rolesWhereInput>
    dress?: DressListRelationFilter
    sale?: SaleListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    born_date?: SortOrder
    user_picture?: SortOrder
    role_id?: SortOrder
    magazine_id?: SortOrder
    date_created?: SortOrder
    magazins?: magazinsOrderByWithRelationInput
    roles?: rolesOrderByWithRelationInput
    dress?: dressOrderByRelationAggregateInput
    sale?: saleOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    username?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    born_date?: SortOrder
    user_picture?: SortOrder
    role_id?: SortOrder
    magazine_id?: SortOrder
    date_created?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    born_date?: StringNullableWithAggregatesFilter | string | null
    user_picture?: StringNullableWithAggregatesFilter | string | null
    role_id?: IntWithAggregatesFilter | number
    magazine_id?: IntNullableWithAggregatesFilter | number | null
    date_created?: StringWithAggregatesFilter | string
  }

  export type balanceWhereInput = {
    AND?: Enumerable<balanceWhereInput>
    OR?: Enumerable<balanceWhereInput>
    NOT?: Enumerable<balanceWhereInput>
    id?: IntFilter | number
    balance?: StringFilter | string
    left_balance?: StringFilter | string
    date_created_updated?: StringFilter | string
  }

  export type balanceOrderByWithRelationInput = {
    id?: SortOrder
    balance?: SortOrder
    left_balance?: SortOrder
    date_created_updated?: SortOrder
  }

  export type balanceWhereUniqueInput = {
    id?: number
  }

  export type balanceOrderByWithAggregationInput = {
    id?: SortOrder
    balance?: SortOrder
    left_balance?: SortOrder
    date_created_updated?: SortOrder
    _count?: balanceCountOrderByAggregateInput
    _avg?: balanceAvgOrderByAggregateInput
    _max?: balanceMaxOrderByAggregateInput
    _min?: balanceMinOrderByAggregateInput
    _sum?: balanceSumOrderByAggregateInput
  }

  export type balanceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<balanceScalarWhereWithAggregatesInput>
    OR?: Enumerable<balanceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<balanceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    balance?: StringWithAggregatesFilter | string
    left_balance?: StringWithAggregatesFilter | string
    date_created_updated?: StringWithAggregatesFilter | string
  }

  export type balance_historyWhereInput = {
    AND?: Enumerable<balance_historyWhereInput>
    OR?: Enumerable<balance_historyWhereInput>
    NOT?: Enumerable<balance_historyWhereInput>
    id?: IntFilter | number
    add_balance?: StringNullableFilter | string | null
    get_balance?: StringNullableFilter | string | null
    note?: StringFilter | string
    report?: BoolFilter | boolean
    date_created?: StringFilter | string
  }

  export type balance_historyOrderByWithRelationInput = {
    id?: SortOrder
    add_balance?: SortOrder
    get_balance?: SortOrder
    note?: SortOrder
    report?: SortOrder
    date_created?: SortOrder
  }

  export type balance_historyWhereUniqueInput = {
    id?: number
  }

  export type balance_historyOrderByWithAggregationInput = {
    id?: SortOrder
    add_balance?: SortOrder
    get_balance?: SortOrder
    note?: SortOrder
    report?: SortOrder
    date_created?: SortOrder
    _count?: balance_historyCountOrderByAggregateInput
    _avg?: balance_historyAvgOrderByAggregateInput
    _max?: balance_historyMaxOrderByAggregateInput
    _min?: balance_historyMinOrderByAggregateInput
    _sum?: balance_historySumOrderByAggregateInput
  }

  export type balance_historyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<balance_historyScalarWhereWithAggregatesInput>
    OR?: Enumerable<balance_historyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<balance_historyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    add_balance?: StringNullableWithAggregatesFilter | string | null
    get_balance?: StringNullableWithAggregatesFilter | string | null
    note?: StringWithAggregatesFilter | string
    report?: BoolWithAggregatesFilter | boolean
    date_created?: StringWithAggregatesFilter | string
  }

  export type costsWhereInput = {
    AND?: Enumerable<costsWhereInput>
    OR?: Enumerable<costsWhereInput>
    NOT?: Enumerable<costsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    number?: StringFilter | string
    amount?: StringFilter | string
    price?: StringFilter | string
    note?: StringFilter | string
    is_serio?: BoolNullableFilter | boolean | null
    date_created?: StringFilter | string
  }

  export type costsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    note?: SortOrder
    is_serio?: SortOrder
    date_created?: SortOrder
  }

  export type costsWhereUniqueInput = {
    id?: number
  }

  export type costsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    note?: SortOrder
    is_serio?: SortOrder
    date_created?: SortOrder
    _count?: costsCountOrderByAggregateInput
    _avg?: costsAvgOrderByAggregateInput
    _max?: costsMaxOrderByAggregateInput
    _min?: costsMinOrderByAggregateInput
    _sum?: costsSumOrderByAggregateInput
  }

  export type costsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<costsScalarWhereWithAggregatesInput>
    OR?: Enumerable<costsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<costsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    number?: StringWithAggregatesFilter | string
    amount?: StringWithAggregatesFilter | string
    price?: StringWithAggregatesFilter | string
    note?: StringWithAggregatesFilter | string
    is_serio?: BoolNullableWithAggregatesFilter | boolean | null
    date_created?: StringWithAggregatesFilter | string
  }

  export type dressWhereInput = {
    AND?: Enumerable<dressWhereInput>
    OR?: Enumerable<dressWhereInput>
    NOT?: Enumerable<dressWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    price?: StringFilter | string
    img?: StringFilter | string
    date_created?: StringFilter | string
    user_id?: IntFilter | number
    users?: XOR<UsersRelationFilter, usersWhereInput>
    sale?: SaleListRelationFilter
  }

  export type dressOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
    users?: usersOrderByWithRelationInput
    sale?: saleOrderByRelationAggregateInput
  }

  export type dressWhereUniqueInput = {
    id?: number
  }

  export type dressOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
    _count?: dressCountOrderByAggregateInput
    _avg?: dressAvgOrderByAggregateInput
    _max?: dressMaxOrderByAggregateInput
    _min?: dressMinOrderByAggregateInput
    _sum?: dressSumOrderByAggregateInput
  }

  export type dressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<dressScalarWhereWithAggregatesInput>
    OR?: Enumerable<dressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<dressScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    price?: StringWithAggregatesFilter | string
    img?: StringWithAggregatesFilter | string
    date_created?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
  }

  export type salonlistWhereInput = {
    AND?: Enumerable<salonlistWhereInput>
    OR?: Enumerable<salonlistWhereInput>
    NOT?: Enumerable<salonlistWhereInput>
    id?: IntFilter | number
    salonchi_name?: StringFilter | string
    salon_name?: StringFilter | string
    address?: StringFilter | string
    phone?: StringFilter | string
    date_created?: StringFilter | string
    user_id?: IntFilter | number
    sale?: SaleListRelationFilter
  }

  export type salonlistOrderByWithRelationInput = {
    id?: SortOrder
    salonchi_name?: SortOrder
    salon_name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
    sale?: saleOrderByRelationAggregateInput
  }

  export type salonlistWhereUniqueInput = {
    id?: number
    salon_name?: string
  }

  export type salonlistOrderByWithAggregationInput = {
    id?: SortOrder
    salonchi_name?: SortOrder
    salon_name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
    _count?: salonlistCountOrderByAggregateInput
    _avg?: salonlistAvgOrderByAggregateInput
    _max?: salonlistMaxOrderByAggregateInput
    _min?: salonlistMinOrderByAggregateInput
    _sum?: salonlistSumOrderByAggregateInput
  }

  export type salonlistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<salonlistScalarWhereWithAggregatesInput>
    OR?: Enumerable<salonlistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<salonlistScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    salonchi_name?: StringWithAggregatesFilter | string
    salon_name?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    date_created?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
  }

  export type saleWhereInput = {
    AND?: Enumerable<saleWhereInput>
    OR?: Enumerable<saleWhereInput>
    NOT?: Enumerable<saleWhereInput>
    id?: IntFilter | number
    isfifty?: BoolNullableFilter | boolean | null
    dress_id?: IntFilter | number
    dress_count?: StringNullableFilter | string | null
    main_price?: StringNullableFilter | string | null
    dress_note?: StringFilter | string
    given_price?: StringNullableFilter | string | null
    left_price?: StringNullableFilter | string | null
    date_left_price?: StringNullableFilter | string | null
    sold_by_phone?: BoolNullableFilter | boolean | null
    salon_id?: IntFilter | number
    delivery_date?: StringNullableFilter | string | null
    need_send?: BoolNullableFilter | boolean | null
    delivered?: BoolNullableFilter | boolean | null
    canceled?: BoolNullableFilter | boolean | null
    girl_name?: StringNullableFilter | string | null
    wedding_date?: StringNullableFilter | string | null
    ispassport?: BoolNullableFilter | boolean | null
    salon_given_price?: StringNullableFilter | string | null
    date_created?: StringFilter | string
    user_id?: IntFilter | number
    dress?: XOR<DressRelationFilter, dressWhereInput>
    salonlist?: XOR<SalonlistRelationFilter, salonlistWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type saleOrderByWithRelationInput = {
    id?: SortOrder
    isfifty?: SortOrder
    dress_id?: SortOrder
    dress_count?: SortOrder
    main_price?: SortOrder
    dress_note?: SortOrder
    given_price?: SortOrder
    left_price?: SortOrder
    date_left_price?: SortOrder
    sold_by_phone?: SortOrder
    salon_id?: SortOrder
    delivery_date?: SortOrder
    need_send?: SortOrder
    delivered?: SortOrder
    canceled?: SortOrder
    girl_name?: SortOrder
    wedding_date?: SortOrder
    ispassport?: SortOrder
    salon_given_price?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
    dress?: dressOrderByWithRelationInput
    salonlist?: salonlistOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type saleWhereUniqueInput = {
    id?: number
  }

  export type saleOrderByWithAggregationInput = {
    id?: SortOrder
    isfifty?: SortOrder
    dress_id?: SortOrder
    dress_count?: SortOrder
    main_price?: SortOrder
    dress_note?: SortOrder
    given_price?: SortOrder
    left_price?: SortOrder
    date_left_price?: SortOrder
    sold_by_phone?: SortOrder
    salon_id?: SortOrder
    delivery_date?: SortOrder
    need_send?: SortOrder
    delivered?: SortOrder
    canceled?: SortOrder
    girl_name?: SortOrder
    wedding_date?: SortOrder
    ispassport?: SortOrder
    salon_given_price?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
    _count?: saleCountOrderByAggregateInput
    _avg?: saleAvgOrderByAggregateInput
    _max?: saleMaxOrderByAggregateInput
    _min?: saleMinOrderByAggregateInput
    _sum?: saleSumOrderByAggregateInput
  }

  export type saleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<saleScalarWhereWithAggregatesInput>
    OR?: Enumerable<saleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<saleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    isfifty?: BoolNullableWithAggregatesFilter | boolean | null
    dress_id?: IntWithAggregatesFilter | number
    dress_count?: StringNullableWithAggregatesFilter | string | null
    main_price?: StringNullableWithAggregatesFilter | string | null
    dress_note?: StringWithAggregatesFilter | string
    given_price?: StringNullableWithAggregatesFilter | string | null
    left_price?: StringNullableWithAggregatesFilter | string | null
    date_left_price?: StringNullableWithAggregatesFilter | string | null
    sold_by_phone?: BoolNullableWithAggregatesFilter | boolean | null
    salon_id?: IntWithAggregatesFilter | number
    delivery_date?: StringNullableWithAggregatesFilter | string | null
    need_send?: BoolNullableWithAggregatesFilter | boolean | null
    delivered?: BoolNullableWithAggregatesFilter | boolean | null
    canceled?: BoolNullableWithAggregatesFilter | boolean | null
    girl_name?: StringNullableWithAggregatesFilter | string | null
    wedding_date?: StringNullableWithAggregatesFilter | string | null
    ispassport?: BoolNullableWithAggregatesFilter | boolean | null
    salon_given_price?: StringNullableWithAggregatesFilter | string | null
    date_created?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
  }

  export type magazinsWhereInput = {
    AND?: Enumerable<magazinsWhereInput>
    OR?: Enumerable<magazinsWhereInput>
    NOT?: Enumerable<magazinsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    img?: StringNullableFilter | string | null
    money?: StringNullableFilter | string | null
    saled_dresses?: StringNullableFilter | string | null
    left_money?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    date_created?: StringFilter | string
    users?: UsersListRelationFilter
  }

  export type magazinsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    img?: SortOrder
    money?: SortOrder
    saled_dresses?: SortOrder
    left_money?: SortOrder
    address?: SortOrder
    date_created?: SortOrder
    users?: usersOrderByRelationAggregateInput
  }

  export type magazinsWhereUniqueInput = {
    id?: number
  }

  export type magazinsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    img?: SortOrder
    money?: SortOrder
    saled_dresses?: SortOrder
    left_money?: SortOrder
    address?: SortOrder
    date_created?: SortOrder
    _count?: magazinsCountOrderByAggregateInput
    _avg?: magazinsAvgOrderByAggregateInput
    _max?: magazinsMaxOrderByAggregateInput
    _min?: magazinsMinOrderByAggregateInput
    _sum?: magazinsSumOrderByAggregateInput
  }

  export type magazinsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<magazinsScalarWhereWithAggregatesInput>
    OR?: Enumerable<magazinsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<magazinsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    img?: StringNullableWithAggregatesFilter | string | null
    money?: StringNullableWithAggregatesFilter | string | null
    saled_dresses?: StringNullableWithAggregatesFilter | string | null
    left_money?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    date_created?: StringWithAggregatesFilter | string
  }

  export type productWhereInput = {
    AND?: Enumerable<productWhereInput>
    OR?: Enumerable<productWhereInput>
    NOT?: Enumerable<productWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    count?: StringNullableFilter | string | null
    amount?: StringFilter | string
    img?: StringNullableFilter | string | null
    date_created?: IntFilter | number
    warehouse?: WarehouseListRelationFilter
  }

  export type productOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    amount?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
    warehouse?: warehouseOrderByRelationAggregateInput
  }

  export type productWhereUniqueInput = {
    id?: number
  }

  export type productOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    amount?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productScalarWhereWithAggregatesInput>
    OR?: Enumerable<productScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    count?: StringNullableWithAggregatesFilter | string | null
    amount?: StringWithAggregatesFilter | string
    img?: StringNullableWithAggregatesFilter | string | null
    date_created?: IntWithAggregatesFilter | number
  }

  export type warehouseWhereInput = {
    AND?: Enumerable<warehouseWhereInput>
    OR?: Enumerable<warehouseWhereInput>
    NOT?: Enumerable<warehouseWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    count?: IntFilter | number
    price?: IntNullableFilter | number | null
    note?: StringFilter | string
    isused?: BoolNullableFilter | boolean | null
    date_created?: IntFilter | number
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type warehouseOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    count?: SortOrder
    price?: SortOrder
    note?: SortOrder
    isused?: SortOrder
    date_created?: SortOrder
    product?: productOrderByWithRelationInput
  }

  export type warehouseWhereUniqueInput = {
    id?: number
  }

  export type warehouseOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    count?: SortOrder
    price?: SortOrder
    note?: SortOrder
    isused?: SortOrder
    date_created?: SortOrder
    _count?: warehouseCountOrderByAggregateInput
    _avg?: warehouseAvgOrderByAggregateInput
    _max?: warehouseMaxOrderByAggregateInput
    _min?: warehouseMinOrderByAggregateInput
    _sum?: warehouseSumOrderByAggregateInput
  }

  export type warehouseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<warehouseScalarWhereWithAggregatesInput>
    OR?: Enumerable<warehouseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<warehouseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    count?: IntWithAggregatesFilter | number
    price?: IntNullableWithAggregatesFilter | number | null
    note?: StringWithAggregatesFilter | string
    isused?: BoolNullableWithAggregatesFilter | boolean | null
    date_created?: IntWithAggregatesFilter | number
  }

  export type rolesCreateInput = {
    role: string
    users?: usersCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateInput = {
    id?: number
    role: string
    users?: usersUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateManyWithoutRolesInput
  }

  export type rolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    users?: usersUncheckedUpdateManyWithoutRolesInput
  }

  export type rolesCreateManyInput = {
    id?: number
    role: string
  }

  export type rolesUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
  }

  export type rolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type usersCreateInput = {
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    date_created: string
    magazins?: magazinsCreateNestedOneWithoutUsersInput
    roles: rolesCreateNestedOneWithoutUsersInput
    dress?: dressCreateNestedManyWithoutUsersInput
    sale?: saleCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    role_id: number
    magazine_id?: number | null
    date_created: string
    dress?: dressUncheckedCreateNestedManyWithoutUsersInput
    sale?: saleUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    magazins?: magazinsUpdateOneWithoutUsersInput
    roles?: rolesUpdateOneRequiredWithoutUsersInput
    dress?: dressUpdateManyWithoutUsersInput
    sale?: saleUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    magazine_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_created?: StringFieldUpdateOperationsInput | string
    dress?: dressUncheckedUpdateManyWithoutUsersInput
    sale?: saleUncheckedUpdateManyWithoutUsersInput
  }

  export type usersCreateManyInput = {
    id?: number
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    role_id: number
    magazine_id?: number | null
    date_created: string
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    magazine_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type balanceCreateInput = {
    balance: string
    left_balance?: string
    date_created_updated: string
  }

  export type balanceUncheckedCreateInput = {
    id?: number
    balance: string
    left_balance?: string
    date_created_updated: string
  }

  export type balanceUpdateInput = {
    balance?: StringFieldUpdateOperationsInput | string
    left_balance?: StringFieldUpdateOperationsInput | string
    date_created_updated?: StringFieldUpdateOperationsInput | string
  }

  export type balanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    balance?: StringFieldUpdateOperationsInput | string
    left_balance?: StringFieldUpdateOperationsInput | string
    date_created_updated?: StringFieldUpdateOperationsInput | string
  }

  export type balanceCreateManyInput = {
    id?: number
    balance: string
    left_balance?: string
    date_created_updated: string
  }

  export type balanceUpdateManyMutationInput = {
    balance?: StringFieldUpdateOperationsInput | string
    left_balance?: StringFieldUpdateOperationsInput | string
    date_created_updated?: StringFieldUpdateOperationsInput | string
  }

  export type balanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    balance?: StringFieldUpdateOperationsInput | string
    left_balance?: StringFieldUpdateOperationsInput | string
    date_created_updated?: StringFieldUpdateOperationsInput | string
  }

  export type balance_historyCreateInput = {
    add_balance?: string | null
    get_balance?: string | null
    note: string
    report?: boolean
    date_created: string
  }

  export type balance_historyUncheckedCreateInput = {
    id?: number
    add_balance?: string | null
    get_balance?: string | null
    note: string
    report?: boolean
    date_created: string
  }

  export type balance_historyUpdateInput = {
    add_balance?: NullableStringFieldUpdateOperationsInput | string | null
    get_balance?: NullableStringFieldUpdateOperationsInput | string | null
    note?: StringFieldUpdateOperationsInput | string
    report?: BoolFieldUpdateOperationsInput | boolean
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type balance_historyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    add_balance?: NullableStringFieldUpdateOperationsInput | string | null
    get_balance?: NullableStringFieldUpdateOperationsInput | string | null
    note?: StringFieldUpdateOperationsInput | string
    report?: BoolFieldUpdateOperationsInput | boolean
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type balance_historyCreateManyInput = {
    id?: number
    add_balance?: string | null
    get_balance?: string | null
    note: string
    report?: boolean
    date_created: string
  }

  export type balance_historyUpdateManyMutationInput = {
    add_balance?: NullableStringFieldUpdateOperationsInput | string | null
    get_balance?: NullableStringFieldUpdateOperationsInput | string | null
    note?: StringFieldUpdateOperationsInput | string
    report?: BoolFieldUpdateOperationsInput | boolean
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type balance_historyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    add_balance?: NullableStringFieldUpdateOperationsInput | string | null
    get_balance?: NullableStringFieldUpdateOperationsInput | string | null
    note?: StringFieldUpdateOperationsInput | string
    report?: BoolFieldUpdateOperationsInput | boolean
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type costsCreateInput = {
    name: string
    number: string
    amount: string
    price: string
    note: string
    is_serio?: boolean | null
    date_created: string
  }

  export type costsUncheckedCreateInput = {
    id?: number
    name: string
    number: string
    amount: string
    price: string
    note: string
    is_serio?: boolean | null
    date_created: string
  }

  export type costsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    is_serio?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type costsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    is_serio?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type costsCreateManyInput = {
    id?: number
    name: string
    number: string
    amount: string
    price: string
    note: string
    is_serio?: boolean | null
    date_created: string
  }

  export type costsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    is_serio?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type costsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    is_serio?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type dressCreateInput = {
    name: string
    price: string
    img: string
    date_created: string
    users: usersCreateNestedOneWithoutDressInput
    sale?: saleCreateNestedManyWithoutDressInput
  }

  export type dressUncheckedCreateInput = {
    id?: number
    name: string
    price: string
    img: string
    date_created: string
    user_id: number
    sale?: saleUncheckedCreateNestedManyWithoutDressInput
  }

  export type dressUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutDressInput
    sale?: saleUpdateManyWithoutDressInput
  }

  export type dressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    sale?: saleUncheckedUpdateManyWithoutDressInput
  }

  export type dressCreateManyInput = {
    id?: number
    name: string
    price: string
    img: string
    date_created: string
    user_id: number
  }

  export type dressUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type dressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type salonlistCreateInput = {
    salonchi_name: string
    salon_name: string
    address: string
    phone: string
    date_created: string
    user_id: number
    sale?: saleCreateNestedManyWithoutSalonlistInput
  }

  export type salonlistUncheckedCreateInput = {
    id?: number
    salonchi_name: string
    salon_name: string
    address: string
    phone: string
    date_created: string
    user_id: number
    sale?: saleUncheckedCreateNestedManyWithoutSalonlistInput
  }

  export type salonlistUpdateInput = {
    salonchi_name?: StringFieldUpdateOperationsInput | string
    salon_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    sale?: saleUpdateManyWithoutSalonlistInput
  }

  export type salonlistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    salonchi_name?: StringFieldUpdateOperationsInput | string
    salon_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    sale?: saleUncheckedUpdateManyWithoutSalonlistInput
  }

  export type salonlistCreateManyInput = {
    id?: number
    salonchi_name: string
    salon_name: string
    address: string
    phone: string
    date_created: string
    user_id: number
  }

  export type salonlistUpdateManyMutationInput = {
    salonchi_name?: StringFieldUpdateOperationsInput | string
    salon_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type salonlistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    salonchi_name?: StringFieldUpdateOperationsInput | string
    salon_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type saleCreateInput = {
    isfifty?: boolean | null
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    dress: dressCreateNestedOneWithoutSaleInput
    salonlist: salonlistCreateNestedOneWithoutSaleInput
    users: usersCreateNestedOneWithoutSaleInput
  }

  export type saleUncheckedCreateInput = {
    id?: number
    isfifty?: boolean | null
    dress_id: number
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    salon_id: number
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    user_id: number
  }

  export type saleUpdateInput = {
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    dress?: dressUpdateOneRequiredWithoutSaleInput
    salonlist?: salonlistUpdateOneRequiredWithoutSaleInput
    users?: usersUpdateOneRequiredWithoutSaleInput
  }

  export type saleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_id?: IntFieldUpdateOperationsInput | number
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_id?: IntFieldUpdateOperationsInput | number
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type saleCreateManyInput = {
    id?: number
    isfifty?: boolean | null
    dress_id: number
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    salon_id: number
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    user_id: number
  }

  export type saleUpdateManyMutationInput = {
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type saleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_id?: IntFieldUpdateOperationsInput | number
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_id?: IntFieldUpdateOperationsInput | number
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type magazinsCreateInput = {
    name: string
    img?: string | null
    money?: string | null
    saled_dresses?: string | null
    left_money?: string | null
    address?: string | null
    date_created: string
    users?: usersCreateNestedManyWithoutMagazinsInput
  }

  export type magazinsUncheckedCreateInput = {
    id?: number
    name: string
    img?: string | null
    money?: string | null
    saled_dresses?: string | null
    left_money?: string | null
    address?: string | null
    date_created: string
    users?: usersUncheckedCreateNestedManyWithoutMagazinsInput
  }

  export type magazinsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    money?: NullableStringFieldUpdateOperationsInput | string | null
    saled_dresses?: NullableStringFieldUpdateOperationsInput | string | null
    left_money?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateManyWithoutMagazinsInput
  }

  export type magazinsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    money?: NullableStringFieldUpdateOperationsInput | string | null
    saled_dresses?: NullableStringFieldUpdateOperationsInput | string | null
    left_money?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    users?: usersUncheckedUpdateManyWithoutMagazinsInput
  }

  export type magazinsCreateManyInput = {
    id?: number
    name: string
    img?: string | null
    money?: string | null
    saled_dresses?: string | null
    left_money?: string | null
    address?: string | null
    date_created: string
  }

  export type magazinsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    money?: NullableStringFieldUpdateOperationsInput | string | null
    saled_dresses?: NullableStringFieldUpdateOperationsInput | string | null
    left_money?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type magazinsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    money?: NullableStringFieldUpdateOperationsInput | string | null
    saled_dresses?: NullableStringFieldUpdateOperationsInput | string | null
    left_money?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type productCreateInput = {
    name: string
    count?: string | null
    amount: string
    img?: string | null
    date_created: number
    warehouse?: warehouseCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    id?: number
    name: string
    count?: string | null
    amount: string
    img?: string | null
    date_created: number
    warehouse?: warehouseUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    count?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: IntFieldUpdateOperationsInput | number
    warehouse?: warehouseUpdateManyWithoutProductInput
  }

  export type productUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    count?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: IntFieldUpdateOperationsInput | number
    warehouse?: warehouseUncheckedUpdateManyWithoutProductInput
  }

  export type productCreateManyInput = {
    id?: number
    name: string
    count?: string | null
    amount: string
    img?: string | null
    date_created: number
  }

  export type productUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    count?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: IntFieldUpdateOperationsInput | number
  }

  export type productUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    count?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: IntFieldUpdateOperationsInput | number
  }

  export type warehouseCreateInput = {
    count: number
    price?: number | null
    note: string
    isused?: boolean | null
    date_created: number
    product: productCreateNestedOneWithoutWarehouseInput
  }

  export type warehouseUncheckedCreateInput = {
    id?: number
    product_id: number
    count: number
    price?: number | null
    note: string
    isused?: boolean | null
    date_created: number
  }

  export type warehouseUpdateInput = {
    count?: IntFieldUpdateOperationsInput | number
    price?: NullableIntFieldUpdateOperationsInput | number | null
    note?: StringFieldUpdateOperationsInput | string
    isused?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: IntFieldUpdateOperationsInput | number
    product?: productUpdateOneRequiredWithoutWarehouseInput
  }

  export type warehouseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    price?: NullableIntFieldUpdateOperationsInput | number | null
    note?: StringFieldUpdateOperationsInput | string
    isused?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: IntFieldUpdateOperationsInput | number
  }

  export type warehouseCreateManyInput = {
    id?: number
    product_id: number
    count: number
    price?: number | null
    note: string
    isused?: boolean | null
    date_created: number
  }

  export type warehouseUpdateManyMutationInput = {
    count?: IntFieldUpdateOperationsInput | number
    price?: NullableIntFieldUpdateOperationsInput | number | null
    note?: StringFieldUpdateOperationsInput | string
    isused?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: IntFieldUpdateOperationsInput | number
  }

  export type warehouseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    price?: NullableIntFieldUpdateOperationsInput | number | null
    note?: StringFieldUpdateOperationsInput | string
    isused?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rolesCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type rolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type rolesMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type rolesMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
  }

  export type rolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type MagazinsRelationFilter = {
    is?: magazinsWhereInput | null
    isNot?: magazinsWhereInput | null
  }

  export type RolesRelationFilter = {
    is?: rolesWhereInput
    isNot?: rolesWhereInput
  }

  export type DressListRelationFilter = {
    every?: dressWhereInput
    some?: dressWhereInput
    none?: dressWhereInput
  }

  export type SaleListRelationFilter = {
    every?: saleWhereInput
    some?: saleWhereInput
    none?: saleWhereInput
  }

  export type dressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type saleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    born_date?: SortOrder
    user_picture?: SortOrder
    role_id?: SortOrder
    magazine_id?: SortOrder
    date_created?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    magazine_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    born_date?: SortOrder
    user_picture?: SortOrder
    role_id?: SortOrder
    magazine_id?: SortOrder
    date_created?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    born_date?: SortOrder
    user_picture?: SortOrder
    role_id?: SortOrder
    magazine_id?: SortOrder
    date_created?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    magazine_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type balanceCountOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    left_balance?: SortOrder
    date_created_updated?: SortOrder
  }

  export type balanceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type balanceMaxOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    left_balance?: SortOrder
    date_created_updated?: SortOrder
  }

  export type balanceMinOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    left_balance?: SortOrder
    date_created_updated?: SortOrder
  }

  export type balanceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type balance_historyCountOrderByAggregateInput = {
    id?: SortOrder
    add_balance?: SortOrder
    get_balance?: SortOrder
    note?: SortOrder
    report?: SortOrder
    date_created?: SortOrder
  }

  export type balance_historyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type balance_historyMaxOrderByAggregateInput = {
    id?: SortOrder
    add_balance?: SortOrder
    get_balance?: SortOrder
    note?: SortOrder
    report?: SortOrder
    date_created?: SortOrder
  }

  export type balance_historyMinOrderByAggregateInput = {
    id?: SortOrder
    add_balance?: SortOrder
    get_balance?: SortOrder
    note?: SortOrder
    report?: SortOrder
    date_created?: SortOrder
  }

  export type balance_historySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type costsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    note?: SortOrder
    is_serio?: SortOrder
    date_created?: SortOrder
  }

  export type costsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type costsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    note?: SortOrder
    is_serio?: SortOrder
    date_created?: SortOrder
  }

  export type costsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    note?: SortOrder
    is_serio?: SortOrder
    date_created?: SortOrder
  }

  export type costsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type dressCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
  }

  export type dressAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type dressMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
  }

  export type dressMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
  }

  export type dressSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type salonlistCountOrderByAggregateInput = {
    id?: SortOrder
    salonchi_name?: SortOrder
    salon_name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
  }

  export type salonlistAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type salonlistMaxOrderByAggregateInput = {
    id?: SortOrder
    salonchi_name?: SortOrder
    salon_name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
  }

  export type salonlistMinOrderByAggregateInput = {
    id?: SortOrder
    salonchi_name?: SortOrder
    salon_name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
  }

  export type salonlistSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type DressRelationFilter = {
    is?: dressWhereInput
    isNot?: dressWhereInput
  }

  export type SalonlistRelationFilter = {
    is?: salonlistWhereInput
    isNot?: salonlistWhereInput
  }

  export type saleCountOrderByAggregateInput = {
    id?: SortOrder
    isfifty?: SortOrder
    dress_id?: SortOrder
    dress_count?: SortOrder
    main_price?: SortOrder
    dress_note?: SortOrder
    given_price?: SortOrder
    left_price?: SortOrder
    date_left_price?: SortOrder
    sold_by_phone?: SortOrder
    salon_id?: SortOrder
    delivery_date?: SortOrder
    need_send?: SortOrder
    delivered?: SortOrder
    canceled?: SortOrder
    girl_name?: SortOrder
    wedding_date?: SortOrder
    ispassport?: SortOrder
    salon_given_price?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
  }

  export type saleAvgOrderByAggregateInput = {
    id?: SortOrder
    dress_id?: SortOrder
    salon_id?: SortOrder
    user_id?: SortOrder
  }

  export type saleMaxOrderByAggregateInput = {
    id?: SortOrder
    isfifty?: SortOrder
    dress_id?: SortOrder
    dress_count?: SortOrder
    main_price?: SortOrder
    dress_note?: SortOrder
    given_price?: SortOrder
    left_price?: SortOrder
    date_left_price?: SortOrder
    sold_by_phone?: SortOrder
    salon_id?: SortOrder
    delivery_date?: SortOrder
    need_send?: SortOrder
    delivered?: SortOrder
    canceled?: SortOrder
    girl_name?: SortOrder
    wedding_date?: SortOrder
    ispassport?: SortOrder
    salon_given_price?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
  }

  export type saleMinOrderByAggregateInput = {
    id?: SortOrder
    isfifty?: SortOrder
    dress_id?: SortOrder
    dress_count?: SortOrder
    main_price?: SortOrder
    dress_note?: SortOrder
    given_price?: SortOrder
    left_price?: SortOrder
    date_left_price?: SortOrder
    sold_by_phone?: SortOrder
    salon_id?: SortOrder
    delivery_date?: SortOrder
    need_send?: SortOrder
    delivered?: SortOrder
    canceled?: SortOrder
    girl_name?: SortOrder
    wedding_date?: SortOrder
    ispassport?: SortOrder
    salon_given_price?: SortOrder
    date_created?: SortOrder
    user_id?: SortOrder
  }

  export type saleSumOrderByAggregateInput = {
    id?: SortOrder
    dress_id?: SortOrder
    salon_id?: SortOrder
    user_id?: SortOrder
  }

  export type magazinsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    img?: SortOrder
    money?: SortOrder
    saled_dresses?: SortOrder
    left_money?: SortOrder
    address?: SortOrder
    date_created?: SortOrder
  }

  export type magazinsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type magazinsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    img?: SortOrder
    money?: SortOrder
    saled_dresses?: SortOrder
    left_money?: SortOrder
    address?: SortOrder
    date_created?: SortOrder
  }

  export type magazinsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    img?: SortOrder
    money?: SortOrder
    saled_dresses?: SortOrder
    left_money?: SortOrder
    address?: SortOrder
    date_created?: SortOrder
  }

  export type magazinsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WarehouseListRelationFilter = {
    every?: warehouseWhereInput
    some?: warehouseWhereInput
    none?: warehouseWhereInput
  }

  export type warehouseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    amount?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    id?: SortOrder
    date_created?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    amount?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    count?: SortOrder
    amount?: SortOrder
    img?: SortOrder
    date_created?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    id?: SortOrder
    date_created?: SortOrder
  }

  export type ProductRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type warehouseCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    count?: SortOrder
    price?: SortOrder
    note?: SortOrder
    isused?: SortOrder
    date_created?: SortOrder
  }

  export type warehouseAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    count?: SortOrder
    price?: SortOrder
    date_created?: SortOrder
  }

  export type warehouseMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    count?: SortOrder
    price?: SortOrder
    note?: SortOrder
    isused?: SortOrder
    date_created?: SortOrder
  }

  export type warehouseMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    count?: SortOrder
    price?: SortOrder
    note?: SortOrder
    isused?: SortOrder
    date_created?: SortOrder
  }

  export type warehouseSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    count?: SortOrder
    price?: SortOrder
    date_created?: SortOrder
  }

  export type usersCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<usersCreateWithoutRolesInput>, Enumerable<usersUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutRolesInput>
    createMany?: usersCreateManyRolesInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type usersUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<usersCreateWithoutRolesInput>, Enumerable<usersUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutRolesInput>
    createMany?: usersCreateManyRolesInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type usersUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<usersCreateWithoutRolesInput>, Enumerable<usersUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: usersCreateManyRolesInputEnvelope
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    connect?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUncheckedUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<usersCreateWithoutRolesInput>, Enumerable<usersUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: usersCreateManyRolesInputEnvelope
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    connect?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type magazinsCreateNestedOneWithoutUsersInput = {
    create?: XOR<magazinsCreateWithoutUsersInput, magazinsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: magazinsCreateOrConnectWithoutUsersInput
    connect?: magazinsWhereUniqueInput
  }

  export type rolesCreateNestedOneWithoutUsersInput = {
    create?: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: rolesCreateOrConnectWithoutUsersInput
    connect?: rolesWhereUniqueInput
  }

  export type dressCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<dressCreateWithoutUsersInput>, Enumerable<dressUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<dressCreateOrConnectWithoutUsersInput>
    createMany?: dressCreateManyUsersInputEnvelope
    connect?: Enumerable<dressWhereUniqueInput>
  }

  export type saleCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<saleCreateWithoutUsersInput>, Enumerable<saleUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutUsersInput>
    createMany?: saleCreateManyUsersInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type dressUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<dressCreateWithoutUsersInput>, Enumerable<dressUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<dressCreateOrConnectWithoutUsersInput>
    createMany?: dressCreateManyUsersInputEnvelope
    connect?: Enumerable<dressWhereUniqueInput>
  }

  export type saleUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<saleCreateWithoutUsersInput>, Enumerable<saleUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutUsersInput>
    createMany?: saleCreateManyUsersInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type magazinsUpdateOneWithoutUsersInput = {
    create?: XOR<magazinsCreateWithoutUsersInput, magazinsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: magazinsCreateOrConnectWithoutUsersInput
    upsert?: magazinsUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: magazinsWhereUniqueInput
    update?: XOR<magazinsUpdateWithoutUsersInput, magazinsUncheckedUpdateWithoutUsersInput>
  }

  export type rolesUpdateOneRequiredWithoutUsersInput = {
    create?: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: rolesCreateOrConnectWithoutUsersInput
    upsert?: rolesUpsertWithoutUsersInput
    connect?: rolesWhereUniqueInput
    update?: XOR<rolesUpdateWithoutUsersInput, rolesUncheckedUpdateWithoutUsersInput>
  }

  export type dressUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<dressCreateWithoutUsersInput>, Enumerable<dressUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<dressCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<dressUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: dressCreateManyUsersInputEnvelope
    set?: Enumerable<dressWhereUniqueInput>
    disconnect?: Enumerable<dressWhereUniqueInput>
    delete?: Enumerable<dressWhereUniqueInput>
    connect?: Enumerable<dressWhereUniqueInput>
    update?: Enumerable<dressUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<dressUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<dressScalarWhereInput>
  }

  export type saleUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<saleCreateWithoutUsersInput>, Enumerable<saleUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: saleCreateManyUsersInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type dressUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<dressCreateWithoutUsersInput>, Enumerable<dressUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<dressCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<dressUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: dressCreateManyUsersInputEnvelope
    set?: Enumerable<dressWhereUniqueInput>
    disconnect?: Enumerable<dressWhereUniqueInput>
    delete?: Enumerable<dressWhereUniqueInput>
    connect?: Enumerable<dressWhereUniqueInput>
    update?: Enumerable<dressUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<dressUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<dressScalarWhereInput>
  }

  export type saleUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<saleCreateWithoutUsersInput>, Enumerable<saleUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: saleCreateManyUsersInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type usersCreateNestedOneWithoutDressInput = {
    create?: XOR<usersCreateWithoutDressInput, usersUncheckedCreateWithoutDressInput>
    connectOrCreate?: usersCreateOrConnectWithoutDressInput
    connect?: usersWhereUniqueInput
  }

  export type saleCreateNestedManyWithoutDressInput = {
    create?: XOR<Enumerable<saleCreateWithoutDressInput>, Enumerable<saleUncheckedCreateWithoutDressInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutDressInput>
    createMany?: saleCreateManyDressInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type saleUncheckedCreateNestedManyWithoutDressInput = {
    create?: XOR<Enumerable<saleCreateWithoutDressInput>, Enumerable<saleUncheckedCreateWithoutDressInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutDressInput>
    createMany?: saleCreateManyDressInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type usersUpdateOneRequiredWithoutDressInput = {
    create?: XOR<usersCreateWithoutDressInput, usersUncheckedCreateWithoutDressInput>
    connectOrCreate?: usersCreateOrConnectWithoutDressInput
    upsert?: usersUpsertWithoutDressInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutDressInput, usersUncheckedUpdateWithoutDressInput>
  }

  export type saleUpdateManyWithoutDressInput = {
    create?: XOR<Enumerable<saleCreateWithoutDressInput>, Enumerable<saleUncheckedCreateWithoutDressInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutDressInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutDressInput>
    createMany?: saleCreateManyDressInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutDressInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutDressInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type saleUncheckedUpdateManyWithoutDressInput = {
    create?: XOR<Enumerable<saleCreateWithoutDressInput>, Enumerable<saleUncheckedCreateWithoutDressInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutDressInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutDressInput>
    createMany?: saleCreateManyDressInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutDressInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutDressInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type saleCreateNestedManyWithoutSalonlistInput = {
    create?: XOR<Enumerable<saleCreateWithoutSalonlistInput>, Enumerable<saleUncheckedCreateWithoutSalonlistInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSalonlistInput>
    createMany?: saleCreateManySalonlistInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type saleUncheckedCreateNestedManyWithoutSalonlistInput = {
    create?: XOR<Enumerable<saleCreateWithoutSalonlistInput>, Enumerable<saleUncheckedCreateWithoutSalonlistInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSalonlistInput>
    createMany?: saleCreateManySalonlistInputEnvelope
    connect?: Enumerable<saleWhereUniqueInput>
  }

  export type saleUpdateManyWithoutSalonlistInput = {
    create?: XOR<Enumerable<saleCreateWithoutSalonlistInput>, Enumerable<saleUncheckedCreateWithoutSalonlistInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSalonlistInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutSalonlistInput>
    createMany?: saleCreateManySalonlistInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutSalonlistInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutSalonlistInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type saleUncheckedUpdateManyWithoutSalonlistInput = {
    create?: XOR<Enumerable<saleCreateWithoutSalonlistInput>, Enumerable<saleUncheckedCreateWithoutSalonlistInput>>
    connectOrCreate?: Enumerable<saleCreateOrConnectWithoutSalonlistInput>
    upsert?: Enumerable<saleUpsertWithWhereUniqueWithoutSalonlistInput>
    createMany?: saleCreateManySalonlistInputEnvelope
    set?: Enumerable<saleWhereUniqueInput>
    disconnect?: Enumerable<saleWhereUniqueInput>
    delete?: Enumerable<saleWhereUniqueInput>
    connect?: Enumerable<saleWhereUniqueInput>
    update?: Enumerable<saleUpdateWithWhereUniqueWithoutSalonlistInput>
    updateMany?: Enumerable<saleUpdateManyWithWhereWithoutSalonlistInput>
    deleteMany?: Enumerable<saleScalarWhereInput>
  }

  export type dressCreateNestedOneWithoutSaleInput = {
    create?: XOR<dressCreateWithoutSaleInput, dressUncheckedCreateWithoutSaleInput>
    connectOrCreate?: dressCreateOrConnectWithoutSaleInput
    connect?: dressWhereUniqueInput
  }

  export type salonlistCreateNestedOneWithoutSaleInput = {
    create?: XOR<salonlistCreateWithoutSaleInput, salonlistUncheckedCreateWithoutSaleInput>
    connectOrCreate?: salonlistCreateOrConnectWithoutSaleInput
    connect?: salonlistWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutSaleInput = {
    create?: XOR<usersCreateWithoutSaleInput, usersUncheckedCreateWithoutSaleInput>
    connectOrCreate?: usersCreateOrConnectWithoutSaleInput
    connect?: usersWhereUniqueInput
  }

  export type dressUpdateOneRequiredWithoutSaleInput = {
    create?: XOR<dressCreateWithoutSaleInput, dressUncheckedCreateWithoutSaleInput>
    connectOrCreate?: dressCreateOrConnectWithoutSaleInput
    upsert?: dressUpsertWithoutSaleInput
    connect?: dressWhereUniqueInput
    update?: XOR<dressUpdateWithoutSaleInput, dressUncheckedUpdateWithoutSaleInput>
  }

  export type salonlistUpdateOneRequiredWithoutSaleInput = {
    create?: XOR<salonlistCreateWithoutSaleInput, salonlistUncheckedCreateWithoutSaleInput>
    connectOrCreate?: salonlistCreateOrConnectWithoutSaleInput
    upsert?: salonlistUpsertWithoutSaleInput
    connect?: salonlistWhereUniqueInput
    update?: XOR<salonlistUpdateWithoutSaleInput, salonlistUncheckedUpdateWithoutSaleInput>
  }

  export type usersUpdateOneRequiredWithoutSaleInput = {
    create?: XOR<usersCreateWithoutSaleInput, usersUncheckedCreateWithoutSaleInput>
    connectOrCreate?: usersCreateOrConnectWithoutSaleInput
    upsert?: usersUpsertWithoutSaleInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutSaleInput, usersUncheckedUpdateWithoutSaleInput>
  }

  export type usersCreateNestedManyWithoutMagazinsInput = {
    create?: XOR<Enumerable<usersCreateWithoutMagazinsInput>, Enumerable<usersUncheckedCreateWithoutMagazinsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutMagazinsInput>
    createMany?: usersCreateManyMagazinsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type usersUncheckedCreateNestedManyWithoutMagazinsInput = {
    create?: XOR<Enumerable<usersCreateWithoutMagazinsInput>, Enumerable<usersUncheckedCreateWithoutMagazinsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutMagazinsInput>
    createMany?: usersCreateManyMagazinsInputEnvelope
    connect?: Enumerable<usersWhereUniqueInput>
  }

  export type usersUpdateManyWithoutMagazinsInput = {
    create?: XOR<Enumerable<usersCreateWithoutMagazinsInput>, Enumerable<usersUncheckedCreateWithoutMagazinsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutMagazinsInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutMagazinsInput>
    createMany?: usersCreateManyMagazinsInputEnvelope
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    connect?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutMagazinsInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutMagazinsInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type usersUncheckedUpdateManyWithoutMagazinsInput = {
    create?: XOR<Enumerable<usersCreateWithoutMagazinsInput>, Enumerable<usersUncheckedCreateWithoutMagazinsInput>>
    connectOrCreate?: Enumerable<usersCreateOrConnectWithoutMagazinsInput>
    upsert?: Enumerable<usersUpsertWithWhereUniqueWithoutMagazinsInput>
    createMany?: usersCreateManyMagazinsInputEnvelope
    set?: Enumerable<usersWhereUniqueInput>
    disconnect?: Enumerable<usersWhereUniqueInput>
    delete?: Enumerable<usersWhereUniqueInput>
    connect?: Enumerable<usersWhereUniqueInput>
    update?: Enumerable<usersUpdateWithWhereUniqueWithoutMagazinsInput>
    updateMany?: Enumerable<usersUpdateManyWithWhereWithoutMagazinsInput>
    deleteMany?: Enumerable<usersScalarWhereInput>
  }

  export type warehouseCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<warehouseCreateWithoutProductInput>, Enumerable<warehouseUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<warehouseCreateOrConnectWithoutProductInput>
    createMany?: warehouseCreateManyProductInputEnvelope
    connect?: Enumerable<warehouseWhereUniqueInput>
  }

  export type warehouseUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<warehouseCreateWithoutProductInput>, Enumerable<warehouseUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<warehouseCreateOrConnectWithoutProductInput>
    createMany?: warehouseCreateManyProductInputEnvelope
    connect?: Enumerable<warehouseWhereUniqueInput>
  }

  export type warehouseUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<warehouseCreateWithoutProductInput>, Enumerable<warehouseUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<warehouseCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<warehouseUpsertWithWhereUniqueWithoutProductInput>
    createMany?: warehouseCreateManyProductInputEnvelope
    set?: Enumerable<warehouseWhereUniqueInput>
    disconnect?: Enumerable<warehouseWhereUniqueInput>
    delete?: Enumerable<warehouseWhereUniqueInput>
    connect?: Enumerable<warehouseWhereUniqueInput>
    update?: Enumerable<warehouseUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<warehouseUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<warehouseScalarWhereInput>
  }

  export type warehouseUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<warehouseCreateWithoutProductInput>, Enumerable<warehouseUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<warehouseCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<warehouseUpsertWithWhereUniqueWithoutProductInput>
    createMany?: warehouseCreateManyProductInputEnvelope
    set?: Enumerable<warehouseWhereUniqueInput>
    disconnect?: Enumerable<warehouseWhereUniqueInput>
    delete?: Enumerable<warehouseWhereUniqueInput>
    connect?: Enumerable<warehouseWhereUniqueInput>
    update?: Enumerable<warehouseUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<warehouseUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<warehouseScalarWhereInput>
  }

  export type productCreateNestedOneWithoutWarehouseInput = {
    create?: XOR<productCreateWithoutWarehouseInput, productUncheckedCreateWithoutWarehouseInput>
    connectOrCreate?: productCreateOrConnectWithoutWarehouseInput
    connect?: productWhereUniqueInput
  }

  export type productUpdateOneRequiredWithoutWarehouseInput = {
    create?: XOR<productCreateWithoutWarehouseInput, productUncheckedCreateWithoutWarehouseInput>
    connectOrCreate?: productCreateOrConnectWithoutWarehouseInput
    upsert?: productUpsertWithoutWarehouseInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutWarehouseInput, productUncheckedUpdateWithoutWarehouseInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type usersCreateWithoutRolesInput = {
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    date_created: string
    magazins?: magazinsCreateNestedOneWithoutUsersInput
    dress?: dressCreateNestedManyWithoutUsersInput
    sale?: saleCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutRolesInput = {
    id?: number
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    magazine_id?: number | null
    date_created: string
    dress?: dressUncheckedCreateNestedManyWithoutUsersInput
    sale?: saleUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutRolesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRolesInput, usersUncheckedCreateWithoutRolesInput>
  }

  export type usersCreateManyRolesInputEnvelope = {
    data: Enumerable<usersCreateManyRolesInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithWhereUniqueWithoutRolesInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutRolesInput, usersUncheckedUpdateWithoutRolesInput>
    create: XOR<usersCreateWithoutRolesInput, usersUncheckedCreateWithoutRolesInput>
  }

  export type usersUpdateWithWhereUniqueWithoutRolesInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutRolesInput, usersUncheckedUpdateWithoutRolesInput>
  }

  export type usersUpdateManyWithWhereWithoutRolesInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutUsersInput>
  }

  export type usersScalarWhereInput = {
    AND?: Enumerable<usersScalarWhereInput>
    OR?: Enumerable<usersScalarWhereInput>
    NOT?: Enumerable<usersScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    phone?: StringFilter | string
    born_date?: StringNullableFilter | string | null
    user_picture?: StringNullableFilter | string | null
    role_id?: IntFilter | number
    magazine_id?: IntNullableFilter | number | null
    date_created?: StringFilter | string
  }

  export type magazinsCreateWithoutUsersInput = {
    name: string
    img?: string | null
    money?: string | null
    saled_dresses?: string | null
    left_money?: string | null
    address?: string | null
    date_created: string
  }

  export type magazinsUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    img?: string | null
    money?: string | null
    saled_dresses?: string | null
    left_money?: string | null
    address?: string | null
    date_created: string
  }

  export type magazinsCreateOrConnectWithoutUsersInput = {
    where: magazinsWhereUniqueInput
    create: XOR<magazinsCreateWithoutUsersInput, magazinsUncheckedCreateWithoutUsersInput>
  }

  export type rolesCreateWithoutUsersInput = {
    role: string
  }

  export type rolesUncheckedCreateWithoutUsersInput = {
    id?: number
    role: string
  }

  export type rolesCreateOrConnectWithoutUsersInput = {
    where: rolesWhereUniqueInput
    create: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput>
  }

  export type dressCreateWithoutUsersInput = {
    name: string
    price: string
    img: string
    date_created: string
    sale?: saleCreateNestedManyWithoutDressInput
  }

  export type dressUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    price: string
    img: string
    date_created: string
    sale?: saleUncheckedCreateNestedManyWithoutDressInput
  }

  export type dressCreateOrConnectWithoutUsersInput = {
    where: dressWhereUniqueInput
    create: XOR<dressCreateWithoutUsersInput, dressUncheckedCreateWithoutUsersInput>
  }

  export type dressCreateManyUsersInputEnvelope = {
    data: Enumerable<dressCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type saleCreateWithoutUsersInput = {
    isfifty?: boolean | null
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    dress: dressCreateNestedOneWithoutSaleInput
    salonlist: salonlistCreateNestedOneWithoutSaleInput
  }

  export type saleUncheckedCreateWithoutUsersInput = {
    id?: number
    isfifty?: boolean | null
    dress_id: number
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    salon_id: number
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
  }

  export type saleCreateOrConnectWithoutUsersInput = {
    where: saleWhereUniqueInput
    create: XOR<saleCreateWithoutUsersInput, saleUncheckedCreateWithoutUsersInput>
  }

  export type saleCreateManyUsersInputEnvelope = {
    data: Enumerable<saleCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type magazinsUpsertWithoutUsersInput = {
    update: XOR<magazinsUpdateWithoutUsersInput, magazinsUncheckedUpdateWithoutUsersInput>
    create: XOR<magazinsCreateWithoutUsersInput, magazinsUncheckedCreateWithoutUsersInput>
  }

  export type magazinsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    money?: NullableStringFieldUpdateOperationsInput | string | null
    saled_dresses?: NullableStringFieldUpdateOperationsInput | string | null
    left_money?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type magazinsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    money?: NullableStringFieldUpdateOperationsInput | string | null
    saled_dresses?: NullableStringFieldUpdateOperationsInput | string | null
    left_money?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type rolesUpsertWithoutUsersInput = {
    update: XOR<rolesUpdateWithoutUsersInput, rolesUncheckedUpdateWithoutUsersInput>
    create: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput>
  }

  export type rolesUpdateWithoutUsersInput = {
    role?: StringFieldUpdateOperationsInput | string
  }

  export type rolesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type dressUpsertWithWhereUniqueWithoutUsersInput = {
    where: dressWhereUniqueInput
    update: XOR<dressUpdateWithoutUsersInput, dressUncheckedUpdateWithoutUsersInput>
    create: XOR<dressCreateWithoutUsersInput, dressUncheckedCreateWithoutUsersInput>
  }

  export type dressUpdateWithWhereUniqueWithoutUsersInput = {
    where: dressWhereUniqueInput
    data: XOR<dressUpdateWithoutUsersInput, dressUncheckedUpdateWithoutUsersInput>
  }

  export type dressUpdateManyWithWhereWithoutUsersInput = {
    where: dressScalarWhereInput
    data: XOR<dressUpdateManyMutationInput, dressUncheckedUpdateManyWithoutDressInput>
  }

  export type dressScalarWhereInput = {
    AND?: Enumerable<dressScalarWhereInput>
    OR?: Enumerable<dressScalarWhereInput>
    NOT?: Enumerable<dressScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    price?: StringFilter | string
    img?: StringFilter | string
    date_created?: StringFilter | string
    user_id?: IntFilter | number
  }

  export type saleUpsertWithWhereUniqueWithoutUsersInput = {
    where: saleWhereUniqueInput
    update: XOR<saleUpdateWithoutUsersInput, saleUncheckedUpdateWithoutUsersInput>
    create: XOR<saleCreateWithoutUsersInput, saleUncheckedCreateWithoutUsersInput>
  }

  export type saleUpdateWithWhereUniqueWithoutUsersInput = {
    where: saleWhereUniqueInput
    data: XOR<saleUpdateWithoutUsersInput, saleUncheckedUpdateWithoutUsersInput>
  }

  export type saleUpdateManyWithWhereWithoutUsersInput = {
    where: saleScalarWhereInput
    data: XOR<saleUpdateManyMutationInput, saleUncheckedUpdateManyWithoutSaleInput>
  }

  export type saleScalarWhereInput = {
    AND?: Enumerable<saleScalarWhereInput>
    OR?: Enumerable<saleScalarWhereInput>
    NOT?: Enumerable<saleScalarWhereInput>
    id?: IntFilter | number
    isfifty?: BoolNullableFilter | boolean | null
    dress_id?: IntFilter | number
    dress_count?: StringNullableFilter | string | null
    main_price?: StringNullableFilter | string | null
    dress_note?: StringFilter | string
    given_price?: StringNullableFilter | string | null
    left_price?: StringNullableFilter | string | null
    date_left_price?: StringNullableFilter | string | null
    sold_by_phone?: BoolNullableFilter | boolean | null
    salon_id?: IntFilter | number
    delivery_date?: StringNullableFilter | string | null
    need_send?: BoolNullableFilter | boolean | null
    delivered?: BoolNullableFilter | boolean | null
    canceled?: BoolNullableFilter | boolean | null
    girl_name?: StringNullableFilter | string | null
    wedding_date?: StringNullableFilter | string | null
    ispassport?: BoolNullableFilter | boolean | null
    salon_given_price?: StringNullableFilter | string | null
    date_created?: StringFilter | string
    user_id?: IntFilter | number
  }

  export type usersCreateWithoutDressInput = {
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    date_created: string
    magazins?: magazinsCreateNestedOneWithoutUsersInput
    roles: rolesCreateNestedOneWithoutUsersInput
    sale?: saleCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutDressInput = {
    id?: number
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    role_id: number
    magazine_id?: number | null
    date_created: string
    sale?: saleUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutDressInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutDressInput, usersUncheckedCreateWithoutDressInput>
  }

  export type saleCreateWithoutDressInput = {
    isfifty?: boolean | null
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    salonlist: salonlistCreateNestedOneWithoutSaleInput
    users: usersCreateNestedOneWithoutSaleInput
  }

  export type saleUncheckedCreateWithoutDressInput = {
    id?: number
    isfifty?: boolean | null
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    salon_id: number
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    user_id: number
  }

  export type saleCreateOrConnectWithoutDressInput = {
    where: saleWhereUniqueInput
    create: XOR<saleCreateWithoutDressInput, saleUncheckedCreateWithoutDressInput>
  }

  export type saleCreateManyDressInputEnvelope = {
    data: Enumerable<saleCreateManyDressInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutDressInput = {
    update: XOR<usersUpdateWithoutDressInput, usersUncheckedUpdateWithoutDressInput>
    create: XOR<usersCreateWithoutDressInput, usersUncheckedCreateWithoutDressInput>
  }

  export type usersUpdateWithoutDressInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    magazins?: magazinsUpdateOneWithoutUsersInput
    roles?: rolesUpdateOneRequiredWithoutUsersInput
    sale?: saleUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutDressInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    magazine_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_created?: StringFieldUpdateOperationsInput | string
    sale?: saleUncheckedUpdateManyWithoutUsersInput
  }

  export type saleUpsertWithWhereUniqueWithoutDressInput = {
    where: saleWhereUniqueInput
    update: XOR<saleUpdateWithoutDressInput, saleUncheckedUpdateWithoutDressInput>
    create: XOR<saleCreateWithoutDressInput, saleUncheckedCreateWithoutDressInput>
  }

  export type saleUpdateWithWhereUniqueWithoutDressInput = {
    where: saleWhereUniqueInput
    data: XOR<saleUpdateWithoutDressInput, saleUncheckedUpdateWithoutDressInput>
  }

  export type saleUpdateManyWithWhereWithoutDressInput = {
    where: saleScalarWhereInput
    data: XOR<saleUpdateManyMutationInput, saleUncheckedUpdateManyWithoutSaleInput>
  }

  export type saleCreateWithoutSalonlistInput = {
    isfifty?: boolean | null
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    dress: dressCreateNestedOneWithoutSaleInput
    users: usersCreateNestedOneWithoutSaleInput
  }

  export type saleUncheckedCreateWithoutSalonlistInput = {
    id?: number
    isfifty?: boolean | null
    dress_id: number
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    user_id: number
  }

  export type saleCreateOrConnectWithoutSalonlistInput = {
    where: saleWhereUniqueInput
    create: XOR<saleCreateWithoutSalonlistInput, saleUncheckedCreateWithoutSalonlistInput>
  }

  export type saleCreateManySalonlistInputEnvelope = {
    data: Enumerable<saleCreateManySalonlistInput>
    skipDuplicates?: boolean
  }

  export type saleUpsertWithWhereUniqueWithoutSalonlistInput = {
    where: saleWhereUniqueInput
    update: XOR<saleUpdateWithoutSalonlistInput, saleUncheckedUpdateWithoutSalonlistInput>
    create: XOR<saleCreateWithoutSalonlistInput, saleUncheckedCreateWithoutSalonlistInput>
  }

  export type saleUpdateWithWhereUniqueWithoutSalonlistInput = {
    where: saleWhereUniqueInput
    data: XOR<saleUpdateWithoutSalonlistInput, saleUncheckedUpdateWithoutSalonlistInput>
  }

  export type saleUpdateManyWithWhereWithoutSalonlistInput = {
    where: saleScalarWhereInput
    data: XOR<saleUpdateManyMutationInput, saleUncheckedUpdateManyWithoutSaleInput>
  }

  export type dressCreateWithoutSaleInput = {
    name: string
    price: string
    img: string
    date_created: string
    users: usersCreateNestedOneWithoutDressInput
  }

  export type dressUncheckedCreateWithoutSaleInput = {
    id?: number
    name: string
    price: string
    img: string
    date_created: string
    user_id: number
  }

  export type dressCreateOrConnectWithoutSaleInput = {
    where: dressWhereUniqueInput
    create: XOR<dressCreateWithoutSaleInput, dressUncheckedCreateWithoutSaleInput>
  }

  export type salonlistCreateWithoutSaleInput = {
    salonchi_name: string
    salon_name: string
    address: string
    phone: string
    date_created: string
    user_id: number
  }

  export type salonlistUncheckedCreateWithoutSaleInput = {
    id?: number
    salonchi_name: string
    salon_name: string
    address: string
    phone: string
    date_created: string
    user_id: number
  }

  export type salonlistCreateOrConnectWithoutSaleInput = {
    where: salonlistWhereUniqueInput
    create: XOR<salonlistCreateWithoutSaleInput, salonlistUncheckedCreateWithoutSaleInput>
  }

  export type usersCreateWithoutSaleInput = {
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    date_created: string
    magazins?: magazinsCreateNestedOneWithoutUsersInput
    roles: rolesCreateNestedOneWithoutUsersInput
    dress?: dressCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutSaleInput = {
    id?: number
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    role_id: number
    magazine_id?: number | null
    date_created: string
    dress?: dressUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutSaleInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSaleInput, usersUncheckedCreateWithoutSaleInput>
  }

  export type dressUpsertWithoutSaleInput = {
    update: XOR<dressUpdateWithoutSaleInput, dressUncheckedUpdateWithoutSaleInput>
    create: XOR<dressCreateWithoutSaleInput, dressUncheckedCreateWithoutSaleInput>
  }

  export type dressUpdateWithoutSaleInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutDressInput
  }

  export type dressUncheckedUpdateWithoutSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type salonlistUpsertWithoutSaleInput = {
    update: XOR<salonlistUpdateWithoutSaleInput, salonlistUncheckedUpdateWithoutSaleInput>
    create: XOR<salonlistCreateWithoutSaleInput, salonlistUncheckedCreateWithoutSaleInput>
  }

  export type salonlistUpdateWithoutSaleInput = {
    salonchi_name?: StringFieldUpdateOperationsInput | string
    salon_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type salonlistUncheckedUpdateWithoutSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    salonchi_name?: StringFieldUpdateOperationsInput | string
    salon_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type usersUpsertWithoutSaleInput = {
    update: XOR<usersUpdateWithoutSaleInput, usersUncheckedUpdateWithoutSaleInput>
    create: XOR<usersCreateWithoutSaleInput, usersUncheckedCreateWithoutSaleInput>
  }

  export type usersUpdateWithoutSaleInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    magazins?: magazinsUpdateOneWithoutUsersInput
    roles?: rolesUpdateOneRequiredWithoutUsersInput
    dress?: dressUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    magazine_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_created?: StringFieldUpdateOperationsInput | string
    dress?: dressUncheckedUpdateManyWithoutUsersInput
  }

  export type usersCreateWithoutMagazinsInput = {
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    date_created: string
    roles: rolesCreateNestedOneWithoutUsersInput
    dress?: dressCreateNestedManyWithoutUsersInput
    sale?: saleCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutMagazinsInput = {
    id?: number
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    role_id: number
    date_created: string
    dress?: dressUncheckedCreateNestedManyWithoutUsersInput
    sale?: saleUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutMagazinsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutMagazinsInput, usersUncheckedCreateWithoutMagazinsInput>
  }

  export type usersCreateManyMagazinsInputEnvelope = {
    data: Enumerable<usersCreateManyMagazinsInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithWhereUniqueWithoutMagazinsInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutMagazinsInput, usersUncheckedUpdateWithoutMagazinsInput>
    create: XOR<usersCreateWithoutMagazinsInput, usersUncheckedCreateWithoutMagazinsInput>
  }

  export type usersUpdateWithWhereUniqueWithoutMagazinsInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutMagazinsInput, usersUncheckedUpdateWithoutMagazinsInput>
  }

  export type usersUpdateManyWithWhereWithoutMagazinsInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutUsersInput>
  }

  export type warehouseCreateWithoutProductInput = {
    count: number
    price?: number | null
    note: string
    isused?: boolean | null
    date_created: number
  }

  export type warehouseUncheckedCreateWithoutProductInput = {
    id?: number
    count: number
    price?: number | null
    note: string
    isused?: boolean | null
    date_created: number
  }

  export type warehouseCreateOrConnectWithoutProductInput = {
    where: warehouseWhereUniqueInput
    create: XOR<warehouseCreateWithoutProductInput, warehouseUncheckedCreateWithoutProductInput>
  }

  export type warehouseCreateManyProductInputEnvelope = {
    data: Enumerable<warehouseCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type warehouseUpsertWithWhereUniqueWithoutProductInput = {
    where: warehouseWhereUniqueInput
    update: XOR<warehouseUpdateWithoutProductInput, warehouseUncheckedUpdateWithoutProductInput>
    create: XOR<warehouseCreateWithoutProductInput, warehouseUncheckedCreateWithoutProductInput>
  }

  export type warehouseUpdateWithWhereUniqueWithoutProductInput = {
    where: warehouseWhereUniqueInput
    data: XOR<warehouseUpdateWithoutProductInput, warehouseUncheckedUpdateWithoutProductInput>
  }

  export type warehouseUpdateManyWithWhereWithoutProductInput = {
    where: warehouseScalarWhereInput
    data: XOR<warehouseUpdateManyMutationInput, warehouseUncheckedUpdateManyWithoutWarehouseInput>
  }

  export type warehouseScalarWhereInput = {
    AND?: Enumerable<warehouseScalarWhereInput>
    OR?: Enumerable<warehouseScalarWhereInput>
    NOT?: Enumerable<warehouseScalarWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    count?: IntFilter | number
    price?: IntNullableFilter | number | null
    note?: StringFilter | string
    isused?: BoolNullableFilter | boolean | null
    date_created?: IntFilter | number
  }

  export type productCreateWithoutWarehouseInput = {
    name: string
    count?: string | null
    amount: string
    img?: string | null
    date_created: number
  }

  export type productUncheckedCreateWithoutWarehouseInput = {
    id?: number
    name: string
    count?: string | null
    amount: string
    img?: string | null
    date_created: number
  }

  export type productCreateOrConnectWithoutWarehouseInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutWarehouseInput, productUncheckedCreateWithoutWarehouseInput>
  }

  export type productUpsertWithoutWarehouseInput = {
    update: XOR<productUpdateWithoutWarehouseInput, productUncheckedUpdateWithoutWarehouseInput>
    create: XOR<productCreateWithoutWarehouseInput, productUncheckedCreateWithoutWarehouseInput>
  }

  export type productUpdateWithoutWarehouseInput = {
    name?: StringFieldUpdateOperationsInput | string
    count?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: IntFieldUpdateOperationsInput | number
  }

  export type productUncheckedUpdateWithoutWarehouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    count?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: StringFieldUpdateOperationsInput | string
    img?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateManyRolesInput = {
    id?: number
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    magazine_id?: number | null
    date_created: string
  }

  export type usersUpdateWithoutRolesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    magazins?: magazinsUpdateOneWithoutUsersInput
    dress?: dressUpdateManyWithoutUsersInput
    sale?: saleUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    magazine_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_created?: StringFieldUpdateOperationsInput | string
    dress?: dressUncheckedUpdateManyWithoutUsersInput
    sale?: saleUncheckedUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    magazine_id?: NullableIntFieldUpdateOperationsInput | number | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type dressCreateManyUsersInput = {
    id?: number
    name: string
    price: string
    img: string
    date_created: string
  }

  export type saleCreateManyUsersInput = {
    id?: number
    isfifty?: boolean | null
    dress_id: number
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    salon_id: number
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
  }

  export type dressUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    sale?: saleUpdateManyWithoutDressInput
  }

  export type dressUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
    sale?: saleUncheckedUpdateManyWithoutDressInput
  }

  export type dressUncheckedUpdateManyWithoutDressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type saleUpdateWithoutUsersInput = {
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    dress?: dressUpdateOneRequiredWithoutSaleInput
    salonlist?: salonlistUpdateOneRequiredWithoutSaleInput
  }

  export type saleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_id?: IntFieldUpdateOperationsInput | number
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_id?: IntFieldUpdateOperationsInput | number
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type saleUncheckedUpdateManyWithoutSaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_id?: IntFieldUpdateOperationsInput | number
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_id?: IntFieldUpdateOperationsInput | number
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
  }

  export type saleCreateManyDressInput = {
    id?: number
    isfifty?: boolean | null
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    salon_id: number
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    user_id: number
  }

  export type saleUpdateWithoutDressInput = {
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    salonlist?: salonlistUpdateOneRequiredWithoutSaleInput
    users?: usersUpdateOneRequiredWithoutSaleInput
  }

  export type saleUncheckedUpdateWithoutDressInput = {
    id?: IntFieldUpdateOperationsInput | number
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_id?: IntFieldUpdateOperationsInput | number
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type saleCreateManySalonlistInput = {
    id?: number
    isfifty?: boolean | null
    dress_id: number
    dress_count?: string | null
    main_price?: string | null
    dress_note: string
    given_price?: string | null
    left_price?: string | null
    date_left_price?: string | null
    sold_by_phone?: boolean | null
    delivery_date?: string | null
    need_send?: boolean | null
    delivered?: boolean | null
    canceled?: boolean | null
    girl_name?: string | null
    wedding_date?: string | null
    ispassport?: boolean | null
    salon_given_price?: string | null
    date_created: string
    user_id: number
  }

  export type saleUpdateWithoutSalonlistInput = {
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    dress?: dressUpdateOneRequiredWithoutSaleInput
    users?: usersUpdateOneRequiredWithoutSaleInput
  }

  export type saleUncheckedUpdateWithoutSalonlistInput = {
    id?: IntFieldUpdateOperationsInput | number
    isfifty?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dress_id?: IntFieldUpdateOperationsInput | number
    dress_count?: NullableStringFieldUpdateOperationsInput | string | null
    main_price?: NullableStringFieldUpdateOperationsInput | string | null
    dress_note?: StringFieldUpdateOperationsInput | string
    given_price?: NullableStringFieldUpdateOperationsInput | string | null
    left_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_left_price?: NullableStringFieldUpdateOperationsInput | string | null
    sold_by_phone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivery_date?: NullableStringFieldUpdateOperationsInput | string | null
    need_send?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delivered?: NullableBoolFieldUpdateOperationsInput | boolean | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    girl_name?: NullableStringFieldUpdateOperationsInput | string | null
    wedding_date?: NullableStringFieldUpdateOperationsInput | string | null
    ispassport?: NullableBoolFieldUpdateOperationsInput | boolean | null
    salon_given_price?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateManyMagazinsInput = {
    id?: number
    username: string
    password: string
    name: string
    phone: string
    born_date?: string | null
    user_picture?: string | null
    role_id: number
    date_created: string
  }

  export type usersUpdateWithoutMagazinsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    date_created?: StringFieldUpdateOperationsInput | string
    roles?: rolesUpdateOneRequiredWithoutUsersInput
    dress?: dressUpdateManyWithoutUsersInput
    sale?: saleUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutMagazinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    born_date?: NullableStringFieldUpdateOperationsInput | string | null
    user_picture?: NullableStringFieldUpdateOperationsInput | string | null
    role_id?: IntFieldUpdateOperationsInput | number
    date_created?: StringFieldUpdateOperationsInput | string
    dress?: dressUncheckedUpdateManyWithoutUsersInput
    sale?: saleUncheckedUpdateManyWithoutUsersInput
  }

  export type warehouseCreateManyProductInput = {
    id?: number
    count: number
    price?: number | null
    note: string
    isused?: boolean | null
    date_created: number
  }

  export type warehouseUpdateWithoutProductInput = {
    count?: IntFieldUpdateOperationsInput | number
    price?: NullableIntFieldUpdateOperationsInput | number | null
    note?: StringFieldUpdateOperationsInput | string
    isused?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: IntFieldUpdateOperationsInput | number
  }

  export type warehouseUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    price?: NullableIntFieldUpdateOperationsInput | number | null
    note?: StringFieldUpdateOperationsInput | string
    isused?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: IntFieldUpdateOperationsInput | number
  }

  export type warehouseUncheckedUpdateManyWithoutWarehouseInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    price?: NullableIntFieldUpdateOperationsInput | number | null
    note?: StringFieldUpdateOperationsInput | string
    isused?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date_created?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}