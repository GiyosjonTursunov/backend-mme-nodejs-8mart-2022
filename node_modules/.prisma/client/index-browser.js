
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.6.0
 * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
 */
Prisma.prismaVersion = {
  client: "3.6.0",
  engine: "dc520b92b1ebb2d28dc3161f9f82e875bd35d727"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.RolesScalarFieldEnum = makeEnum({
  id: 'id',
  role: 'role'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  password: 'password',
  name: 'name',
  phone: 'phone',
  born_date: 'born_date',
  user_picture: 'user_picture',
  role_id: 'role_id',
  magazine_id: 'magazine_id',
  date_created: 'date_created'
});

exports.Prisma.BalanceScalarFieldEnum = makeEnum({
  id: 'id',
  balance: 'balance',
  left_balance: 'left_balance',
  date_created_updated: 'date_created_updated'
});

exports.Prisma.Balance_historyScalarFieldEnum = makeEnum({
  id: 'id',
  add_balance: 'add_balance',
  get_balance: 'get_balance',
  note: 'note',
  report: 'report',
  date_created: 'date_created'
});

exports.Prisma.CostsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  number: 'number',
  amount: 'amount',
  price: 'price',
  note: 'note',
  is_serio: 'is_serio',
  date_created: 'date_created'
});

exports.Prisma.DressScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  price: 'price',
  img: 'img',
  date_created: 'date_created',
  user_id: 'user_id'
});

exports.Prisma.SalonlistScalarFieldEnum = makeEnum({
  id: 'id',
  salonchi_name: 'salonchi_name',
  salon_name: 'salon_name',
  address: 'address',
  phone: 'phone',
  date_created: 'date_created',
  user_id: 'user_id'
});

exports.Prisma.SaleScalarFieldEnum = makeEnum({
  id: 'id',
  isfifty: 'isfifty',
  dress_id: 'dress_id',
  dress_count: 'dress_count',
  main_price: 'main_price',
  dress_note: 'dress_note',
  given_price: 'given_price',
  left_price: 'left_price',
  date_left_price: 'date_left_price',
  sold_by_phone: 'sold_by_phone',
  salon_id: 'salon_id',
  delivery_date: 'delivery_date',
  need_send: 'need_send',
  delivered: 'delivered',
  canceled: 'canceled',
  girl_name: 'girl_name',
  wedding_date: 'wedding_date',
  ispassport: 'ispassport',
  salon_given_price: 'salon_given_price',
  date_created: 'date_created',
  user_id: 'user_id'
});

exports.Prisma.MagazinsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  img: 'img',
  money: 'money',
  saled_dresses: 'saled_dresses',
  left_money: 'left_money',
  address: 'address',
  date_created: 'date_created'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  count: 'count',
  amount: 'amount',
  img: 'img',
  date_created: 'date_created'
});

exports.Prisma.WarehouseScalarFieldEnum = makeEnum({
  id: 'id',
  product_id: 'product_id',
  count: 'count',
  price: 'price',
  note: 'note',
  isused: 'isused',
  date_created: 'date_created'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  roles: 'roles',
  users: 'users',
  balance: 'balance',
  balance_history: 'balance_history',
  costs: 'costs',
  dress: 'dress',
  salonlist: 'salonlist',
  sale: 'sale',
  magazins: 'magazins',
  product: 'product',
  warehouse: 'warehouse'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
